[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Attendance", 
  "modified": "2018-06-20 14:29:32.405945", 
  "name": "Attendance-Client", 
  "script": "frappe.ui.form.on(\"Attendance\", {\n    shift: function(frm) {\n       switch(frm.doc.shift) {\n               case 'G':\n                frm.set_value(\"in_time\",\"09:00:00\");\n\t\tfrm.set_value(\"out_time\",\"18:00:00\"); \n        }\n    }\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee", 
  "modified": "2021-03-03 16:30:36.036589", 
  "name": "Employee-Client", 
  "script": "frappe.ui.form.on('Employee', {\nstatus:function(frm){\nif(frm.doc.status == \"Left\"){\nfrappe.call({\nmethod:'minda_custom.custom.mark_left_in_test',\nargs:{\n'emp':frm.doc.name\n}\n})\n}\n},\nvalidate: function (frm) {\nif(frm.doc.aadhar_number){\nfrappe.call({\nmethod:\"minda_custom.custom.mark_employee_in_test\",\nargs:{\n\"name\":frm.doc.name,\n\"aadhar_no\":frm.doc.aadhar_number\n},\ncallback(r){}\n})\n}\nif (frm.doc.relieving_date && frm.doc.status == 'Active'){\nmsgprint(\"Active Employees should not have Relieving Date\"); \n validated = false;\n}\nfrm.toggle_reqd(\"contractor\", frm.doc.employment_type === 'Contract');\nif (frm.doc.date_of_joining > get_today()) {         \nmsgprint(\"You can not select future date in Joining Date\");        \n validated = false;   \n  }\n}\n});\n\n\n\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Auto Cutting and Crimping", 
  "modified": "2019-10-11 12:16:17.504575", 
  "name": "Auto Cutting and Crimping-Client", 
  "script": "frappe.ui.form.on(\"Auto Cutting and Crimping\",{\nvalidate:function(frm){\nif(!frm.doc.total_practical_mark_obtained){\nvar date = frappe.datetime.add_days(frappe.datetime.nowdate(), -30);\nif((frm.doc.date_of_joining > date) && (frm.doc.date_of_joining <= frappe.datetime.nowdate())){\nfrm.set_value(\"legend\",\"L1-Trainee\")\n}\n}\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\tvalidate = false;\n}\nif(frm.doc.total_practical_mark_obtained < 50.00){\nfrm.set_value(\"legend\",\"\");\n}\nif((frm.doc.total_practical_mark_obtained >= 50.00) && (frm.doc.total_practical_mark_obtained <= 60.00)){\nfrm.set_value(\"legend\",\"L1-Trainee\");\n}\nelse if((frm.doc.total_practical_mark_obtained >= 60.01) && (frm.doc.total_practical_mark_obtained <= 75.00)){\nfrm.set_value(\"legend\",\"L2-Can Work under Supervision\");\n}\nelse if((frm.doc.total_practical_mark_obtained >=75.01) && (frm.doc.total_practical_mark_obtained <= 90.00)){\nfrm.set_value(\"legend\",\"L3-Can Work Independently\");\n}\nelse if((frm.doc.total_practical_mark_obtained >= 90.01) && (frm.doc.total_practical_mark_obtained <= 100.00)){\nfrm.set_value(\"legend\",\"L4-Can Train Others\");\n}\nif (frm.doc.productivity > 15){\n\tmsgprint(\" For Productivity,You cannot able to give mark greater than 15\");\n\tvalidated = false; \n}\nif (frm.doc.attendance > 5){\n\tmsgprint(\" For Attendance,You cannot able to give mark greater than 5\");\n\tvalidated = false; \n}\nif (frm.doc.work_quality > 15){\n\tmsgprint(\" For Work Quality,You cannot able to give mark greater than 15\");\n\tvalidated = false; \n}\nif (frm.doc.discipline > 5){\n\tmsgprint(\" For Discipline,You cannot able to give mark greater than 5\");\n\tvalidated = false; \n}\n},\n   question_set:function(frm){\n        frm.trigger(\"questions\")\n    },\nrefresh:function(frm){\n\tfrm.trigger(\"questions\")\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nquestions: function(frm){\nfrappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': 'Crimping Questions',\n\t\t'filters': {'name':frm.doc.question_set},\n                'fields' : ['*']\n            },\n            callback: function(r) {\n            if (!r.exc) {\n                    // code snippet\n                    (r.message || []).forEach(function (d) {\n                        $('[data-fieldname=\"identification_of_wire_size\"]').html('<h4>'+d.identification_of_wire_size+'</h4>');\n                        $('[data-fieldname=\"wire_and_striping_length_measurement\"]').html('<h4>'+d.wire_and_striping_length_measurement+'</h4>');\n                        $('[data-fieldname=\"tolerance_for_cutting_striping_and_crimping_height\"]').html('<h4>'+d.tolerance_for_cutting_striping_and_crimping_height+'</h4>');\n                        $('[data-fieldname=\"crimp_height_and_strength_load_checking\"]').html('<h4>'+d.crimp_height_and_strength_load_checking+'</h4>');\n                        $('[data-fieldname=\"identification_of_wire_color\"]').html('<h4>'+d.identification_of_wire_color+'</h4>');\n                        $('[data-fieldname=\"material_identification\"]').html('<h4>'+d.material_identification+'</h4>');\n                        $('[data-fieldname=\"self_inspection\"]').html('<h4>'+d.self_inspection+'</h4>');\n                        $('[data-fieldname=\"defect_1\"]').html('<h4>'+\"1.\"+d.defect_1+'</h4>');\n                        $('[data-fieldname=\"defect_2\"]').html('<h4>'+\"2.\"+d.defect_2+'</h4>');\n                        $('[data-fieldname=\"defect_3\"]').html('<h4>'+\"3.\"+d.defect_3+'</h4>');\n                        $('[data-fieldname=\"defect_4\"]').html('<h4>'+\"4.\"+d.defect_4+'</h4>');\n                        $('[data-fieldname=\"defect_5\"]').html('<h4>'+\"5.\"+d.defect_5+'</h4>');\n                        $('[data-fieldname=\"defect_6\"]').html('<h4>'+\"6.\"+d.defect_6+'</h4>');\n                        $('[data-fieldname=\"defect_7\"]').html('<h4>'+\"7.\"+d.defect_7+'</h4>');\n                        $('[data-fieldname=\"defect_8\"]').html('<h4>'+\"8.\"+d.defect_8+'</h4>');\n                        $('[data-fieldname=\"defect_9\"]').html('<h4>'+\"9.\"+d.defect_9+'</h4>');\n                        $('[data-fieldname=\"defect_10\"]').html('<h4>'+\"10.\"+d.defect_10+'</h4>');\n                        $('[data-fieldname=\"defect_11\"]').html('<h4>'+\"11.\"+d.defect_11+'</h4>');\n                        $('[data-fieldname=\"defect_12\"]').html('<h4>'+\"12.\"+d.defect_12+'</h4>');\n                        $('[data-fieldname=\"defect_13\"]').html('<h4>'+\"13.\"+d.defect_13+'</h4>');\n                        $('[data-fieldname=\"defect_14\"]').html('<h4>'+\"14.\"+d.defect_14+'</h4>');\n                        $('[data-fieldname=\"defect_15\"]').html('<h4>'+\"15.\"+d.defect_15+'</h4>');\n                        $('[data-fieldname=\"defect_16\"]').html('<h4>'+\"16.\"+d.defect_16+'</h4>');\n                        $('[data-fieldname=\"defect_17\"]').html('<h4>'+\"17.\"+d.defect_17+'</h4>');\n                        $('[data-fieldname=\"defect_18\"]').html('<h4>'+\"18.\"+d.defect_18+'</h4>');\n                        $('[data-fieldname=\"defect_19\"]').html('<h4>'+\"19.\"+d.defect_19+'</h4>');\n                        $('[data-fieldname=\"defect_20\"]').html('<h4>'+\"20.\"+d.defect_20+'</h4>');\n                        $('[data-fieldname=\"defect_21\"]').html('<h4>'+\"21.\"+d.defect_21+'</h4>');\n                        $('[data-fieldname=\"clit_check_1\"]').html('<h4>'+d.clit_check_1+'</h4>')\n                        $('[data-fieldname=\"clit_check_2\"]').html('<h4>'+d.clit_check_2+'</h4>');\n                        $('[data-fieldname=\"clit_check_3\"]').html('<h4>'+d.clit_check_3+'</h4>');\n                        $('[data-fieldname=\"clit_check_4\"]').html('<h4>'+d.clit_check_4+'</h4>');\n                        $('[data-fieldname=\"clit_check_5\"]').html('<h4>'+d.clit_check_5+'</h4>');\n                        $('[data-fieldname=\"clit_check_6\"]').html('<h4>'+d.clit_check_6+'</h4>');\n                        $('[data-fieldname=\"clit_check_7\"]').html('<h4>'+d.clit_check_7+'</h4>');\n                        $('[data-fieldname=\"safety_1\"]').html('<h4>'+d.safety_1+'</h4>');\n                        $('[data-fieldname=\"safety_2\"]').html('<h4>'+d.safety_2+'</h4>');\n                        $('[data-fieldname=\"safety_3\"]').html('<h4>'+d.safety_3+'</h4>');\n                        $('[data-fieldname=\"work_instruction_1\"]').html('<h4>'+d.work_instruction_1+'</h4>')\n                        $('[data-fieldname=\"work_instruction_2\"]').html('<h4>'+d.work_instruction_2+'</h4>');\n                        $('[data-fieldname=\"work_instruction_3\"]').html('<h4>'+d.work_instruction_3+'</h4>');\n                        $('[data-fieldname=\"work_instruction_4\"]').html('<h4>'+d.work_instruction_4+'</h4>');\n                        $('[data-fieldname=\"work_instruction_5\"]').html('<h4>'+d.work_instruction_5+'</h4>');\n                        $('[data-fieldname=\"work_instruction_6\"]').html('<h4>'+d.work_instruction_6+'</h4>');\n                        $('[data-fieldname=\"work_instruction_7\"]').html('<h4>'+d.work_instruction_7+'</h4>');\n                        $('[data-fieldname=\"foa_1\"]').html('<h4>'+d.foa_1+'</h4>');\n                        $('[data-fieldname=\"foa_2\"]').html('<h4>'+d.foa_2+'</h4>');\n                        $('[data-fieldname=\"foa_3\"]').html('<h4>'+d.foa_3+'</h4>');\n                        $('[data-fieldname=\"one_s\"]').html('<h4>'+d.one_s+'</h4>');\n                        $('[data-fieldname=\"two_s\"]').html('<h4>'+d.two_s+'</h4>');\n                        $('[data-fieldname=\"three_s\"]').html('<h4>'+d.three_s+'</h4>');\n                        $('[data-fieldname=\"zero_setting\"]').html('<h4>'+d.zero_setting+'</h4>');\n                        $('[data-fieldname=\"racheat_handling\"]').html('<h4>'+d.racheat_handling+'</h4>');\n                        $('[data-fieldname=\"correct_crimp_height\"]').html('<h4>'+d.correct_crimp_height+'</h4>');\n                        $('[data-fieldname=\"basic_1\"]').html('<h4>'+d.basic_1+'</h4>')\n                        $('[data-fieldname=\"basic_2\"]').html('<h4>'+d.basic_2+'</h4>');\n                        $('[data-fieldname=\"basic_3\"]').html('<h4>'+d.basic_3+'</h4>');\n                        $('[data-fieldname=\"basic_4\"]').html('<h4>'+d.basic_4+'</h4>');\n                        $('[data-fieldname=\"basic_5\"]').html('<h4>'+d.basic_5+'</h4>');\n                        $('[data-fieldname=\"basic_6\"]').html('<h4>'+d.basic_6+'</h4>');\n                    });\n                }\n        \n            }\n        \n        })\n},\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Semi Auto Crimping", 
  "modified": "2019-10-12 16:46:25.063296", 
  "name": "Semi Auto Crimping-Client", 
  "script": "frappe.ui.form.on(\"Semi Auto Crimping\",{\nvalidate:function(frm){\nif(frm.doc.date_of_joining){\nvar date = frappe.datetime.add_days(frappe.datetime.nowdate(), -30);\nif((frm.doc.date_of_joining >= date) && (frm.doc.date_of_joining <= frappe.datetime.nowdate())){\nfrm.set_value(\"legend\",\"L1-Trainee\")\n}\n}\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\tvalidate = false;\n}\nif(frm.doc.total_practical_mark_obtained < 50.00 && frm.doc.total_practical_mark_obtained != 0.0){\nfrm.set_value(\"legend\",\" \");\n}\nif((frm.doc.total_practical_mark_obtained >= 50.00) && (frm.doc.total_practical_mark_obtained <= 60.00)){\nfrm.set_value(\"legend\",\"L1-Trainee\");\n}\nelse if((frm.doc.total_practical_mark_obtained >= 60.01) && (frm.doc.total_practical_mark_obtained <= 75.00)){\nfrm.set_value(\"legend\",\"L2-Can Work under Supervision\");\n}\nelse if((frm.doc.total_practical_mark_obtained >=75.01) && (frm.doc.total_practical_mark_obtained <= 90.00)){\nfrm.set_value(\"legend\",\"L3-Can Work Independently\");\n}\nelse if((frm.doc.total_practical_mark_obtained >= 90.01) && (frm.doc.total_practical_mark_obtained <= 100.00)){\nfrm.set_value(\"legend\",\"L4-Can Train Others\");\n}\nif (frm.doc.productivity > 15){\n\tmsgprint(\" For Productivity,You cannot able to give mark greater than 15\");\n\tvalidated = false; \n}\nif (frm.doc.attendance > 5){\n\tmsgprint(\" For Attendance,You cannot able to give mark greater than 5\");\n\tvalidated = false; \n}\nif (frm.doc.work_quality > 15){\n\tmsgprint(\" For Work Quality,You cannot able to give mark greater than 15\");\n\tvalidated = false; \n}\nif (frm.doc.discipline > 5){\n\tmsgprint(\" For Discipline,You cannot able to give mark greater than 5\");\n\tvalidated = false; \n}\n},\n   choose_question:function(frm){\nif(!frm.doc.question_set){\nif(frm.doc.question_set2){\n        frm.trigger(\"questions\")\n}\n}else {\n frappe.msgprint(\"Choose the Question Set First\")\n}\n    },\nonload: function(frm){\nfrm.set_query(\"question_set2\", function () {\n           var List = [\"Crimping Questions\",\"Heat Sealing and Joint Covering\",\"Middld Striping and Ultra Sonic\",\"Twisting\",\"Parts Fitting Operators\"]\n            return {\n                \"filters\": {\n                    \"name\": [\"in\", List],\n                }\n            };\n        });\n\tif(frm.doc.question_set){\nfrm.set_value(\"choose_question\", frm.doc.question_set)\nfrm.set_value(\"question_set2\", \"Crimping Questions\")\nif(frm.doc.old_data != \"Updated\"){\nfrm.save()\nfrm.set_value(\"old_data\",\"Updated\")\n}\n}\n},\nrefresh:function(frm){\n\tfrm.trigger(\"questions\")\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\nquestions: function(frm){\nif(frm.doc.question_set2){\n                        if(frm.doc.question_set2 == \"Parts Fitting Operators\"){\n                   console.log(\"hi\")\n\t\t\t$('h6:contains(\"CLIT Check Sheet\")').text('Crimping Defects');\n                        }\nfrappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                'doctype': frm.doc.question_set2,\n\t\t'filters': {'name':frm.doc.choose_question},\n                'fields' : ['*']\n            },\n            callback: function(r) {\n            if (!r.exc) {\n                    // code snippet\n                    (r.message || []).forEach(function (d) {\n                        $('[data-fieldname=\"identification_of_wire_size\"]').html('<h4>'+d.identification_of_wire_size+'</h4>');\n                        $('[data-fieldname=\"wire_and_striping_length_measurement\"]').html('<h4>'+d.wire_and_striping_length_measurement+'</h4>');\n                        $('[data-fieldname=\"tolerance_for_cutting_striping_and_crimping_height\"]').html('<h4>'+d.tolerance_for_cutting_striping_and_crimping_height+'</h4>');\n                        $('[data-fieldname=\"crimp_height_and_strength_load_checking\"]').html('<h4>'+d.crimp_height_and_strength_load_checking+'</h4>');\n                        $('[data-fieldname=\"identification_of_wire_color\"]').html('<h4>'+d.identification_of_wire_color+'</h4>');\n                        $('[data-fieldname=\"material_identification\"]').html('<h4>'+d.material_identification+'</h4>');\n                        $('[data-fieldname=\"self_inspection\"]').html('<h4>'+d.self_inspection+'</h4>');\n                        $('[data-fieldname=\"clit_check_1\"]').html('<h4>'+d.clit_check_1+'</h4>')\n                        $('[data-fieldname=\"clit_check_2\"]').html('<h4>'+d.clit_check_2+'</h4>');\n                        $('[data-fieldname=\"clit_check_3\"]').html('<h4>'+d.clit_check_3+'</h4>');\n                        $('[data-fieldname=\"clit_check_4\"]').html('<h4>'+d.clit_check_4+'</h4>');\n                        $('[data-fieldname=\"clit_check_5\"]').html('<h4>'+d.clit_check_5+'</h4>');\n                        $('[data-fieldname=\"clit_check_6\"]').html('<h4>'+d.clit_check_6+'</h4>');\n                        $('[data-fieldname=\"clit_check_7\"]').html('<h4>'+d.clit_check_7+'</h4>');\n                        $('[data-fieldname=\"safety_1\"]').html('<h4>'+d.safety_1+'</h4>');\n                        $('[data-fieldname=\"safety_2\"]').html('<h4>'+d.safety_2+'</h4>');\n                        $('[data-fieldname=\"safety_3\"]').html('<h4>'+d.safety_3+'</h4>');\n                        $('[data-fieldname=\"work_instruction_1\"]').html('<h4>'+d.work_instruction_1+'</h4>')\n                        $('[data-fieldname=\"work_instruction_2\"]').html('<h4>'+d.work_instruction_2+'</h4>');\n                        $('[data-fieldname=\"work_instruction_3\"]').html('<h4>'+d.work_instruction_3+'</h4>');\n                        $('[data-fieldname=\"work_instruction_4\"]').html('<h4>'+d.work_instruction_4+'</h4>');\n                        $('[data-fieldname=\"work_instruction_5\"]').html('<h4>'+d.work_instruction_5+'</h4>');\n                        $('[data-fieldname=\"work_instruction_6\"]').html('<h4>'+d.work_instruction_6+'</h4>');\n                        $('[data-fieldname=\"work_instruction_7\"]').html('<h4>'+d.work_instruction_7+'</h4>');\n                        $('[data-fieldname=\"foa_1\"]').html('<h4>'+d.foa_1+'</h4>');\n                        $('[data-fieldname=\"foa_2\"]').html('<h4>'+d.foa_2+'</h4>');\n                        $('[data-fieldname=\"foa_3\"]').html('<h4>'+d.foa_3+'</h4>');\n                        $('[data-fieldname=\"one_s\"]').html('<h4>'+d.one_s+'</h4>');\n                        $('[data-fieldname=\"two_s\"]').html('<h4>'+d.two_s+'</h4>');\n                        $('[data-fieldname=\"three_s\"]').html('<h4>'+d.three_s+'</h4>');\n                        $('[data-fieldname=\"zero_setting\"]').html('<h4>'+d.zero_setting+'</h4>');\n                        $('[data-fieldname=\"racheat_handling\"]').html('<h4>'+d.racheat_handling+'</h4>');\n                        $('[data-fieldname=\"correct_crimp_height\"]').html('<h4>'+d.correct_crimp_height+'</h4>');\n                        $('[data-fieldname=\"basic_1\"]').html('<h4>'+d.basic_1+'</h4>')\n                        $('[data-fieldname=\"basic_2\"]').html('<h4>'+d.basic_2+'</h4>');\n                        $('[data-fieldname=\"basic_3\"]').html('<h4>'+d.basic_3+'</h4>');\n                        $('[data-fieldname=\"basic_4\"]').html('<h4>'+d.basic_4+'</h4>');\n                        $('[data-fieldname=\"basic_5\"]').html('<h4>'+d.basic_5+'</h4>');\n                        $('[data-fieldname=\"basic_6\"]').html('<h4>'+d.basic_6+'</h4>');\n                        if(frm.doc.question_set2 == \"Crimping Questions\"){\n                        $('[data-fieldname=\"defect_1\"]').html('<h4>'+\"1.\"+d.defect_1+'</h4>');\n                        $('[data-fieldname=\"defect_2\"]').html('<h4>'+\"2.\"+d.defect_2+'</h4>');\n                        $('[data-fieldname=\"defect_3\"]').html('<h4>'+\"3.\"+d.defect_3+'</h4>');\n                        $('[data-fieldname=\"defect_4\"]').html('<h4>'+\"4.\"+d.defect_4+'</h4>');\n                        $('[data-fieldname=\"defect_5\"]').html('<h4>'+\"5.\"+d.defect_5+'</h4>');\n                        $('[data-fieldname=\"defect_6\"]').html('<h4>'+\"6.\"+d.defect_6+'</h4>');\n                        $('[data-fieldname=\"defect_7\"]').html('<h4>'+\"7.\"+d.defect_7+'</h4>');\n                        $('[data-fieldname=\"defect_8\"]').html('<h4>'+\"8.\"+d.defect_8+'</h4>');\n                        $('[data-fieldname=\"defect_9\"]').html('<h4>'+\"9.\"+d.defect_9+'</h4>');\n                        $('[data-fieldname=\"defect_10\"]').html('<h4>'+\"10.\"+d.defect_10+'</h4>');\n                        $('[data-fieldname=\"defect_11\"]').html('<h4>'+\"11.\"+d.defect_11+'</h4>');\n                        $('[data-fieldname=\"defect_12\"]').html('<h4>'+\"12.\"+d.defect_12+'</h4>');\n                        $('[data-fieldname=\"defect_13\"]').html('<h4>'+\"13.\"+d.defect_13+'</h4>');\n                        $('[data-fieldname=\"defect_14\"]').html('<h4>'+\"14.\"+d.defect_14+'</h4>');\n                        $('[data-fieldname=\"defect_15\"]').html('<h4>'+\"15.\"+d.defect_15+'</h4>');\n                        $('[data-fieldname=\"defect_16\"]').html('<h4>'+\"16.\"+d.defect_16+'</h4>');\n                        $('[data-fieldname=\"defect_17\"]').html('<h4>'+\"17.\"+d.defect_17+'</h4>');\n                        $('[data-fieldname=\"defect_18\"]').html('<h4>'+\"18.\"+d.defect_18+'</h4>');\n                        $('[data-fieldname=\"defect_19\"]').html('<h4>'+\"19.\"+d.defect_19+'</h4>');\n                        $('[data-fieldname=\"defect_20\"]').html('<h4>'+\"20.\"+d.defect_20+'</h4>');\n                        $('[data-fieldname=\"defect_21\"]').html('<h4>'+\"21.\"+d.defect_21+'</h4>');\n                        } else {\n                        $('a:contains(\"CLIT Check Sheet\")').text('Crimping Defects');\n                        $('[data-fieldname=\"defect_1\"]').html('<h4>'+\"1.\"+d.defect_1+'</h4>');\n                        $('[data-fieldname=\"defect_2\"]').html('<h4>'+\"2.\"+d.defect_2+'</h4>');\n                        $('[data-fieldname=\"defect_3\"]').html('<h4>'+\"3.\"+d.defect_3+'</h4>');\n                        $('[data-fieldname=\"defect_4\"]').html('<h4>'+\"4.\"+d.defect_4+'</h4>');\n                        $('[data-fieldname=\"defect_5\"]').html('<h4>'+\"5.\"+d.defect_5+'</h4>');\n                        $('[data-fieldname=\"defect_6\"]').html('<h4>'+\"6.\"+d.defect_6+'</h4>');\n                        $('[data-fieldname=\"defect_7\"]').html('<h4>'+\"7.\"+d.defect_7+'</h4>');\n                        $('[data-fieldname=\"defect_8\"]').html('<h4>'+\"1.\"+d.defect_8+'</h4>');\n                        $('[data-fieldname=\"defect_9\"]').html('<h4>'+\"2.\"+d.defect_9+'</h4>');\n                        $('[data-fieldname=\"defect_10\"]').html('<h4>'+\"3.\"+d.defect_10+'</h4>');\n                        $('[data-fieldname=\"defect_11\"]').html('<h4>'+\"4.\"+d.defect_11+'</h4>');\n                        $('[data-fieldname=\"defect_12\"]').html('<h4>'+\"5.\"+d.defect_12+'</h4>');\n                        $('[data-fieldname=\"defect_13\"]').html('<h4>'+\"6.\"+d.defect_13+'</h4>');\n                        $('[data-fieldname=\"defect_14\"]').html('<h4>'+\"7.\"+d.defect_14+'</h4>');\n                        $('[data-fieldname=\"defect_15\"]').html('<h4>'+\"1.\"+d.defect_15+'</h4>');\n                        $('[data-fieldname=\"defect_16\"]').html('<h4>'+\"2.\"+d.defect_16+'</h4>');\n                        $('[data-fieldname=\"defect_17\"]').html('<h4>'+\"3.\"+d.defect_17+'</h4>');\n                        $('[data-fieldname=\"defect_18\"]').html('<h4>'+\"4.\"+d.defect_18+'</h4>');\n                        $('[data-fieldname=\"defect_19\"]').html('<h4>'+\"5.\"+d.defect_19+'</h4>');\n                        $('[data-fieldname=\"defect_20\"]').html('<h4>'+\"6.\"+d.defect_20+'</h4>');\n                        $('[data-fieldname=\"defect_21\"]').html('<h4>'+\"7.\"+d.defect_21+'</h4>');\n                        }\n                    });\n                }\n        \n            }\n        \n        })\n}\n}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee Details Tracking Sheet", 
  "modified": "2019-11-06 16:00:01.467568", 
  "name": "Employee Details Tracking Sheet-Client", 
  "script": "frappe.ui.form.on(\"Employee Details Tracking Sheet\",{\n    refresh: function(frm){\n    cur_frm.fields_dict['employee_line_and_shift_details'].grid.wrapper.find('.grid-add-row').hide();\n            cur_frm.fields_dict['employee_line_and_shift_details'].grid.wrapper.find('.grid-remove-rows').hide();\n    cur_frm.fields_dict['edt_assembly_details'].grid.wrapper.find('.grid-add-row').hide();\n            cur_frm.fields_dict['edt_assembly_details'].grid.wrapper.find('.grid-remove-rows').hide();\n    cur_frm.fields_dict['edt_crimping_details'].grid.wrapper.find('.grid-add-row').hide();\n            cur_frm.fields_dict['edt_crimping_details'].grid.wrapper.find('.grid-remove-rows').hide();\n    cur_frm.fields_dict['edt_komax_details'].grid.wrapper.find('.grid-add-row').hide();\n            cur_frm.fields_dict['edt_komax_details'].grid.wrapper.find('.grid-remove-rows').hide();\n    },\n        onload:function(frm){\n    frm.trigger(\"refresh\")\n        frm.disable_save();\n    },\n        employee_code: function(frm) {\n           if(frm.doc.employee_code){\n                    frappe.call({\n                    method: \"frappe.client.get\",\n                    args: {\n                        doctype: \"Employee\",\n                        name:frm.doc.employee_code\n                    },\n                    callback: function (r){\n                        if (r.message) {\n                            frm.set_value(\"image\", r.message.image);\n                            frm.set_value(\"associate\", r.message.employee_name);\n                            frm.set_value(\"department\", r.message.department);\n                frm.set_value(\"designation\",r.message.designation);\n                frm.set_value(\"shift\",r.message.shift);\n                frm.set_value(\"line_name\",r.message.line);\n                frm.set_value(\"date_of_joining\",r.message.date_of_joining);\n                        }\n                    }\n        })\n    }\n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"Line and Shift Assignment Details\",\n        filters:{\n        \"employee\": frm.doc.employee_code\n        }\n    },\n    callback: function(r){\n    if(r.message){\n            $.each(r.message, function (i, d) {\n        frappe.call({\n        \"method\": \"frappe.client.get\",\n        args:{\n        \"doctype\": \"Line and Shift Assignment Details\",\n        \"name\": d.name\n        },\n        callback: function(r){\n    if(r.message){\n    var row = frappe.model.add_child(frm.doc, \"Employee Line and Shift Details\", \"employee_line_and_shift_details\");\n                                            row.existed_line = r.message.current_line;\n                                            row.revised_line = r.message.new_line;\n                                            row.existed_shift = r.message.current_shift;\n                                            row.revised_shift = r.message.new_shift;\n                                            row.assigned_date = r.message.date_of_assign;\n    }\n    refresh_field(\"employee_line_and_shift_details\");\n    }\n    })\n    })\n    }\n    }\n    })\n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"KVS Type Assignment\",\n        filters:{\n        \"employee\": frm.doc.employee_code\n        }\n    },\n    callback: function(r){\n    if(r.message){\n            $.each(r.message, function (i, d) {\n        frappe.call({\n        \"method\": \"frappe.client.get\",\n        args:{\n        \"doctype\": \"KVS Type Assignment\",\n        \"name\": d.name\n        },\n        callback: function(r){\n    frm.set_value(\"type\",r.message.knowledge_verification_type)\n    }\n    })\n    })\n    }\n    }\n    })\n    \n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"Induction Training Machine Area Crimping\",\n        filters:{\n        \"employee_code\": frm.doc.employee_code\n        }\n        },\n        callback: function(r){\n    if(r.message){\n            $.each(r.message, function (i, d) {\n        frappe.call({\n        \"method\": \"frappe.client.get\",\n        args:{\n        \"doctype\": \"Induction Training Machine Area Crimping\",\n        \"name\": d.name\n        },\n        callback: function(r){\n\tif(r.message.is_machine_area_operator_applicable != \"1\"){\n         frm.set_value(\"status_ma\",\"Completed\")\n         frm.set_value(\"score_ma\",r.message.total_score)\n    frm.set_value(\"status_mao\",\"Not Applicable\")\n         frm.set_value(\"score_mao\",\"-\")\n    frm.set_value(\"status_aa\",\"Not Applicable\")\n         frm.set_value(\"score_aa\",\"-\")\n}\n   else if(r.message.is_machine_area_operator_applicable == \"1\"){\n         frm.set_value(\"status_ma\",\"Completed\")\n         frm.set_value(\"score_ma\",r.message.total_score)\n    frm.set_value(\"status_mao\",\"Not Applicable\")\n         frm.set_value(\"score_mao\",\"-\")\n    frm.set_value(\"status_aa\",\"Not Applicable\")\n         frm.set_value(\"score_aa\",\"-\")\n    \n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"Induction Training Machine Area Operator\",\n        filters:{\n        \"employee_code\": frm.doc.employee_code\n        }\n        },\n        callback: function(r){\n    if(r.message){\n            $.each(r.message, function (i, d) {\n        frappe.call({\n        \"method\": \"frappe.client.get\",\n        args:{\n        \"doctype\": \"Induction Training Machine Area Operator\",\n        \"name\": d.name\n        },\n        callback: function(r){\n    frm.set_value(\"status_mao\",\"Completed\")\n         frm.set_value(\"score_mao\",r.message.total_score)\n    }\n    })\n    })\n    } else {\n    frm.set_value(\"status_mao\",\"Pending\")\n         frm.set_value(\"score_mao\",\"-\")\n    }\n    }\n    })\n    }\n        }\n        })\n        })\n    } else {\n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"Induction Training Assembly Area\",\n        filters:{\n        \"employee_code\": frm.doc.employee_code\n        }\n        },\n        callback: function(r){\n    if(r.message){\n            $.each(r.message, function (i, d) {\n        frappe.call({\n        \"method\": \"frappe.client.get\",\n        args:{\n        \"doctype\": \"Induction Training Assembly Area\",\n        \"name\": d.name\n        },\n        callback: function(r){\n         frm.set_value(\"status_aa\",\"Completed\")\n         frm.set_value(\"score_aa\",r.message.total_score)\n    frm.set_value(\"status_ma\",\"Not Applicable\")\n         frm.set_value(\"score_ma\",\"-\")\n    frm.set_value(\"status_mao\",\"Not Applicable\")\n         frm.set_value(\"score_mao\",\"-\")\n        }\n        })\n        })\n    } else {\n    frm.set_value(\"status_aa\",\"Pending\")\n         frm.set_value(\"score_aa\",\"-\")\n    }\n        }\n        })\n    frm.set_value(\"status_ma\",\"Pending\")\n         frm.set_value(\"score_ma\",\"-\")\n    frm.set_value(\"status_mao\",\"Pending\")\n         frm.set_value(\"score_mao\",\"-\")\n    }\n        }\n        })\n    \n    // frappe.call({\n    //     \"method\": \"frappe.client.get_list\",\n    //     args:{\n    //     \"doctype\": \"Assembly Evaluation\",\n    //     filters:{\n    //     \"employee_code\": frm.doc.employee_code\n    //     }\n    //     },\n    //     callback: function(r){\n    // if(r.message){\n    //         $.each(r.message, function (i, d) {\n    //     frappe.call({\n    //     \"method\": \"frappe.client.get\",\n    //     args:{\n    //     \"doctype\": \"Assembly Evaluation\",\n    //     \"name\": d.name\n    \n    //     },\n    //     callback: function(r){\n    // console.log(\"hi\")\n    //      frm.set_value(\"status_wct\",r.message.grade)\n    //      frm.set_value(\"score_wct\",r.message.score)\n    // frm.set_value(\"status_mi\",r.message.grade1)\n    //      frm.set_value(\"score_mi\",r.message.score1)\n    // frm.set_value(\"status_ti\",r.message.grade2)\n    //      frm.set_value(\"score_ti\",r.message.score2)\n    // frm.set_value(\"status_ci\",r.message.grade3)\n    //      frm.set_value(\"score_ci\",r.message.score3)\n    // frm.set_value(\"status_sat\",r.message.grade4)\n    //      frm.set_value(\"score_sat\",r.message.score4)\n    // frm.set_value(\"status_tt\",r.message.grade5)\n    //      frm.set_value(\"score_tt\",r.message.score5)\n    //     }\n    //     })\n    //     })\n    // } else {\n    // console.log(\"ok\")\n    //      frm.set_value(\"status_wct\",\"Pending\")\n    //      frm.set_value(\"score_wct\",\"-\")\n    // frm.set_value(\"status_mi\",\"Pending\")\n    //      frm.set_value(\"score_mi\",\"-\")\n    // frm.set_value(\"status_ti\",\"Pending\")\n    //      frm.set_value(\"score_ti\",\"-\")\n    // frm.set_value(\"status_ci\",\"Pending\")\n    //      frm.set_value(\"score_ci\",\"-\")\n    // frm.set_value(\"status_sat\",\"Pending\")\n    //      frm.set_value(\"score_sat\",\"-\")\n    // frm.set_value(\"status_tt\",\"Pending\")\n    //      frm.set_value(\"score_tt\",\"-\")\n    // }\n    //     }\n    //     })\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args:{\n            \"doctype\": \"New Joinees Practical Knowledge Verification\",\n            filters:{\n            \"employee_code\": frm.doc.employee_code\n            }\n            },\n            callback: function(r){\n        if(r.message){\n                $.each(r.message, function (i, d) {\n            frappe.call({\n            \"method\": \"frappe.client.get\",\n            args:{\n            \"doctype\": \"New Joinees Practical Knowledge Verification\",\n            \"name\": d.name\n        \n            },\n            callback: function(r){\n       // console.log(\"hi\")\n             frm.set_value(\"status_wct\",r.message.grade)\n             frm.set_value(\"score_wct\",r.message.score)\n        frm.set_value(\"status_mi\",r.message.grade1)\n             frm.set_value(\"score_mi\",r.message.score1)\n        frm.set_value(\"status_ti\",r.message.grade2)\n             frm.set_value(\"score_ti\",r.message.score2)\n        frm.set_value(\"status_ci\",r.message.grade3)\n             frm.set_value(\"score_ci\",r.message.score3)\n        frm.set_value(\"status_sat\",r.message.grade4)\n             frm.set_value(\"score_sat\",r.message.score4)\n        frm.set_value(\"status_tt\",r.message.grade5)\n             frm.set_value(\"score_tt\",r.message.score5)\n\tfrm.set_value(\"score_cd\",r.message.score6)\n\tfrm.set_value(\"status_cd\",r.message.grade6)\n\tfrm.set_value(\"score_mih\",r.message.score8)\n\tfrm.set_value(\"status_mih\",r.message.grade8)\n\tfrm.set_value(\"score_ct\",r.message.score7)\n\tfrm.set_value(\"status_ct\",r.message.grade7)\n            }\n            })\n            })\n        } else {\n        // console.log(\"ok\")\n             frm.set_value(\"status_wct\",\"Pending\")\n             frm.set_value(\"score_wct\",\"-\")\n        frm.set_value(\"status_mi\",\"Pending\")\n             frm.set_value(\"score_mi\",\"-\")\n        frm.set_value(\"status_ti\",\"Pending\")\n             frm.set_value(\"score_ti\",\"-\")\n        frm.set_value(\"status_ci\",\"Pending\")\n             frm.set_value(\"score_ci\",\"-\")\n        frm.set_value(\"status_sat\",\"Pending\")\n             frm.set_value(\"score_sat\",\"-\")\n        frm.set_value(\"status_tt\",\"Pending\")\n             frm.set_value(\"score_tt\",\"-\")\n\tfrm.set_value(\"score_cd\",\"-\")\n\tfrm.set_value(\"status_cd\",\"Pending\")\n\tfrm.set_value(\"score_mih\",\"-\")\n\tfrm.set_value(\"status_mih\",\"Pending\")\n\tfrm.set_value(\"score_ct\",\"-\")\n\tfrm.set_value(\"status_ct\",\"Pending\")\n        }\n            }\n            })\n    frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args:{\n                \"doctype\": \"Selection Test\",\n                filters:{\n                \"name\": frm.doc.employee_code\n            }\n                },\n                callback: function(r){\n                 if(r.message){\n $.each(r.message, function (i, d) {\nfrappe.call({\n                \"method\": \"frappe.client.get\",\n                args:{\n                \"doctype\": \"Selection Test\",\n                filters:{\n                \"name\": d.name\n            }\n                },\n                callback: function(r){\n                frm.set_value(\"selection_test\",r.message.total_score)\n}\n})\n})\n} else {\nfrm.set_value(\"selection_test\",0)\n}\n        }})\n        frappe.call({\n            \"method\": \"frappe.client.get_list\",\n            args:{\n            \"doctype\": \"Color Blindness Test\",\n            filters:{\n            \"name\": frm.doc.employee_code\n        }\n            },\n            callback: function(r){\n             if(r.message){\n$.each(r.message, function (i, d) {\nfrappe.call({\n            \"method\": \"frappe.client.get\",\n            args:{\n            \"doctype\": \"Color Blindness Test\",\n            filters:{\n            \"name\": d.name\n        }\n            },\n            callback: function(r){\n            frm.set_value(\"color_blindness_test\",r.message.total_score)\n}\n})\n})\n} else {\nfrm.set_value(\"color_blindness_test\",0)\n}\n    }})\n\n    frappe.call({\n        \"method\": \"frappe.client.get_list\",\n        args:{\n        \"doctype\": \"Associate Performance Monitoring Check Sheet\",\n        filters:{\n        \"employee_code\": frm.doc.employee_code\n        }\n        },\n        callback: function(r){\n    if(r.message){\n     frm.set_value(\"status_md\",\"Completed\")\n    } else {\n     frm.set_value(\"status_md\",\"Pending\")\n    }\n        }\n        })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Komax Operator Training Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_k\",\"Completed\")\n    } else {\n    frm.set_value(\"status_k\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Komax Operator Production Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_k1\",\"Completed\")\n    } else {\n    frm.set_value(\"status_k1\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Komax Operator Quality Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_k2\",\"Completed\")\n    } else {\n    frm.set_value(\"status_k2\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Parts fitting Operator Training Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_p\",\"Completed\")\n    } else {\n    frm.set_value(\"status_p\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Parts fitting Operator Production Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_p1\",\"Completed\")\n    } else {\n    frm.set_value(\"status_p1\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Parts fitting Operator Quality Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_p2\",\"Completed\")\n    } else {\n    frm.set_value(\"status_p2\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Sub assy process Training Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_sap\",\"Completed\")\n    } else {\n    frm.set_value(\"status_sap\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Sub assy process Production Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_sap1\",\"Completed\")\n    } else {\n    frm.set_value(\"status_sap1\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Sub assy process Quality Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_sap2\",\"Completed\")\n    } else {\n    frm.set_value(\"status_sap2\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Tapping Operator Training Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_to\",\"Completed\")\n    } else {\n    frm.set_value(\"status_to\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Tapping Operator Production Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_to1\",\"Completed\")\n    } else {\n    frm.set_value(\"status_to1\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Tapping Operator Quality Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_to2\",\"Completed\")\n    } else {\n    frm.set_value(\"status_to2\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Checker Board Operator Training Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_cbo\",\"Completed\")\n    } else {\n    frm.set_value(\"status_cbo\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Checker Board Operator Production Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_cbo1\",\"Completed\")\n    } else {\n    frm.set_value(\"status_cbo1\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Checker Board Operator Quality Observation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    if(r.message){\n    frm.set_value(\"status_cbo2\",\"Completed\")\n    } else {\n    frm.set_value(\"status_cbo2\",\"Pending\")\n    }\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Auto Cutting and Crimping\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    $.each(r.message, function (i, d) {\n    frappe.call({\n              \"method\": \"frappe.client.get\",\n               args:{\n                 \"doctype\":\"Auto Cutting and Crimping\",\n                  \"name\": d.name\n                 },\n                 callback: function(r){\n                   var row = frappe.model.add_child(frm.doc, \"EDT Komax Details\", \"edt_komax_details\");\n    row.name1 = r.message.name\n    row.month_of_evaluation = r.message.month_of_evaluation\n    row.line_name = r.message.line_name\n    row.score = r.message.total_practical_mark_obtained\n    row.legend = r.message.legend\n    frm.refresh_field(\"edt_komax_details\")\n    }\n    })\n    })\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Semi Auto Crimping\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    $.each(r.message, function (i, d) {\n    frappe.call({\n              \"method\": \"frappe.client.get\",\n               args:{\n                 \"doctype\":\"Semi Auto Crimping\",\n                  \"name\": d.name\n                 },\n                 callback: function(r){\n                   var row = frappe.model.add_child(frm.doc, \"EDT Crimping Details\", \"edt_crimping_details\");\n    row.name1 = r.message.name\n    row.month_of_evaluation = r.message.month_of_evaluation\n    row.line_name = r.message.line_name\n    row.score = r.message.total_practical_mark_obtained\n    row.legend = r.message.legend\n    frm.refresh_field(\"edt_crimping_details\")\n    }\n    })\n    })\n    }\n    })\n    frappe.call({\n              \"method\": \"frappe.client.get_list\",\n               args:{\n                 \"doctype\":\"Assembly Evaluation\",\n                  filters:{ \n                  \"employee_code\" : frm.doc.employee_code\n                 }\n                 },\n                 callback: function(r){\n    $.each(r.message, function (i, d) {\n    frappe.call({\n              \"method\": \"frappe.client.get\",\n               args:{\n                 \"doctype\":\"Assembly Evaluation\",\n                  \"name\": d.name\n                 },\n                 callback: function(r){\n                   var row = frappe.model.add_child(frm.doc, \"EDT Assembly Details\", \"edt_assembly_details\");\n    row.name1 = r.message.name\n    row.month_of_evaluation = r.message.month_of_evaluation\n    row.line_name = r.message.line_name\n    row.score = r.message.total_score\n    row.legend = r.message.skill_level\n    frm.refresh_field(\"edt_assembly_details\")\n    }\n    })\n    })\n    }\n    })\n        },\n    komax: function(frm){\n     if(frm.doc.status_k == \"Completed\"){\n    frappe.set_route(\"Form\",\"Komax Operator Training Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    komax1: function(frm){\n     if(frm.doc.status_k1 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Komax Operator Production Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    komax2: function(frm){\n     if(frm.doc.status_k2 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Komax Operator Quality Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    parts_fitting_operator: function(frm){\n     if(frm.doc.status_p == \"Completed\"){\n    frappe.set_route(\"Form\",\"Parts fitting Operator Training Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    parts_fitting_operator1: function(frm){\n     if(frm.doc.status_p1 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Parts fitting Operator Production Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    parts_fitting_operator2: function(frm){\n     if(frm.doc.status_p2 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Parts fitting Operator Quality Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    sub_assy_process: function(frm){\n     if(frm.doc.status_sap == \"Completed\"){\n    frappe.set_route(\"Form\",\"Sub assy process Training Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    sub_assy_process1: function(frm){\n     if(frm.doc.status_sap1 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Sub assy process Production Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    sub_assy_process2: function(frm){\n     if(frm.doc.status_sap2 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Sub assy process Quality Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    tapping_operator: function(frm){\n     if(frm.doc.status_to == \"Completed\"){\n    frappe.set_route(\"Form\",\"Tapping Operator Training Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    tapping_operator1: function(frm){\n     if(frm.doc.status_to1 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Tapping Operator Production Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    tapping_operator2: function(frm){\n     if(frm.doc.status_to2 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Tapping Operator Quality Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    checker_board_operator: function(frm){\n     if(frm.doc.status_cbo == \"Completed\"){\n    frappe.set_route(\"Form\",\"Checker Board Operator Training Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    checker_board_operator1: function(frm){\n     if(frm.doc.status_cbo1 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Checker Board Operator Production Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    checker_board_operator2: function(frm){\n     if(frm.doc.status_cbo2 == \"Completed\"){\n    frappe.set_route(\"Form\",\"Checker Board Operator Quality Observation\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    monitoring: function(frm){\n    if(frm.doc.status_md == \"Completed\"){\n    frappe.set_route(\"Form\",\"Associate Performance Monitoring Check Sheet\",frm.doc.employee_code)\n    } else {\n    frappe.msgprint(\"The Process is Pending\")\n    }\n    },\n    process_ma: function(frm){\n    if(frm.doc.status_ma == \"Pending\"){\n    frappe.set_route(\"Form\",\"Induction Training Machine Area Crimping\",\"New Induction Training Machine Area Crimping\",{\"employee_code\": frm.doc.employee_code})\n    } else if(frm.doc.status_ma == \"Completed\"){\n    frappe.set_route(\"Form\",\"Induction Training Machine Area Crimping\",frm.doc.employee_code)\n    }\n    },\n    process_aa: function(frm){\n    if(frm.doc.status_aa == \"Pending\"){\n    frappe.set_route(\"Form\",\"Induction Training Assembly Area\",\"New Induction Training Assembly Area\",{\"employee_code\": frm.doc.employee_code})\n    } else if(frm.doc.status_aa == \"Completed\"){\n    frappe.set_route(\"Form\",\"Induction Training Assembly Area\",frm.doc.employee_code)\n    }\n    },\n    process_mao: function(frm){\n    if(frm.doc.status_mao == \"Pending\" && frm.doc.process_ma == \"Completed\"){\n    frappe.set_route(\"Form\",\"Induction Training Machine Area Operator\",\"New Induction Training Machine Area Operator\",{\"employee_code\": frm.doc.employee_code})\n    } else if(frm.doc.status_mao == \"Completed\" && frm.doc.process_ma == \"Completed\"){\n    frappe.set_route(\"Form\",\"Induction Training Machine Area Operator\",frm.doc.employee_code)\n    }\n    },\nselection_test_link: function(frm){\nif(frm.doc.selection_test){\n    frappe.set_route(\"Form\",\"Selection Test\",frm.doc.employee_code)\n    } else {\nfrappe.set_route(\"Form\",\"Selection Test\",\"New Selection Test\",{\"employee_code\": frm.doc.employee_code})\n    }\n}\n    });", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Induction Training Machine Area Crimping", 
  "modified": "2019-11-29 15:19:46.703687", 
  "name": "Induction Training Machine Area Crimping-Client", 
  "script": "frappe.ui.form.on(\"Induction Training Machine Area Crimping\",{\n\temployee_code: function(frm) {\nif(frm.doc.employee_code){\nfrappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Induction Training Assembly Area\",\n                    filters:{\n                     \"employee_code\":frm.doc.employee_code\n                     }\n                },\n                callback: function (r){\nif(r.message){\nfrappe.msgprint(\"You Already Attended the Induction Training Assembly Area Test\")\nfrm.set_value(\"employee_code\",\"\")\n}\n}\n})\n                frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name:frm.doc.employee_code\n                },\n                callback: function (r){\n                    if(r.message.status == \"Left\"){\nfrappe.validated = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\t\n} else {\n                        frm.set_value(\"associate\", r.message.employee_name);\n\t\t\tfrm.set_value(\"shift\",r.message.shift);\n\t\t\tfrm.set_value(\"line_name\",r.message.line);\n\t\t\tfrm.set_value(\"date_of_joining\",r.message.date_of_joining);\nfrm.set_value(\"status\",r.message.status);\n                    }\n                }\n\t})\n}\n\t},\ntest_score_validation: function(frm){\nvar s = 0\nif(frm.doc.answer1==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\t\n}else if(frm.doc.answer1!=\"\"){\n frm.set_df_property('answer1', 'read_only', 1);\n\t\n}\nif(frm.doc.answer2==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer2!=\"\"){\n frm.set_df_property('answer2', 'read_only', 1);\n}\nif(frm.doc.answer3==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer3!=\"\"){\n frm.set_df_property('answer3', 'read_only', 1);\n}\nif(frm.doc.answer4==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer4!=\"\"){\nfrm.set_df_property('answer4', 'read_only', 1);\n}\nif(frm.doc.answer5==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer5!=\"\"){\nfrm.set_df_property('answer5', 'read_only', 1);\n}\nif(frm.doc.answer6==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer6!=\"\"){\nfrm.set_df_property('answer6', 'read_only', 1);\n}\nif(frm.doc.answer7==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer7!=\"\"){\n frm.set_df_property('answer7', 'read_only', 1);\n}\nif(frm.doc.answer8==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer8!=\"\"){\nfrm.set_df_property('answer8', 'read_only', 1);\n}\nif(frm.doc.answer9==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer9!=\"\"){\n frm.set_df_property('answer9', 'read_only', 1);\n}\nif(frm.doc.answer10==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer10!=\"\"){\nfrm.set_df_property('answer10', 'read_only', 1);\n}\nif(frm.doc.answer11==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer11!=\"\"){\n frm.set_df_property('answer11', 'read_only', 1);\n}\nif(frm.doc.answer12==\"B\"){\n\ts=s+0.3;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer122==\"C\"){\n\ts=s+0.3;\n\t$(cur_frm.fields_dict.answer122.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer122!=\"\"){\nfrm.set_df_property('answer122', 'read_only', 1);\n}\nif(frm.doc.answer123==\"A\"){\n\ts=s+0.3;\n\t$(cur_frm.fields_dict.answer123.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer123!=\"\"){\nfrm.set_df_property('answer123', 'read_only', 1);\n}\nif(frm.doc.answer13==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer13!=\"\"){\n frm.set_df_property('answer13', 'read_only', 1);\n}\nif(frm.doc.answer14==\"\u0b87\"){\n\ts=s+0.3;\n\t$(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer14!=\"\"){\n frm.set_df_property('answer14', 'read_only', 1);\n}\n\nif(frm.doc.answer15==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer15!=\"\"){\nfrm.set_df_property('answer15', 'read_only', 1);\n}\nif(frm.doc.answer16==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer16.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer16!=\"\"){\nfrm.set_df_property('answer16', 'read_only', 1);\n}\nif(frm.doc.answer17==\"\u0b88\"){\n\ts=s+0.2;\n\t$(cur_frm.fields_dict.answer17.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer17!=\"\"){\n frm.set_df_property('answer17', 'read_only', 1);\n}\nif(frm.doc.answer172==\"\u0b86\"){\n\ts=s+0.2;\n\t$(cur_frm.fields_dict.answer172.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer172!=\"\"){\n frm.set_df_property('answer172', 'read_only', 1);\n}\nif(frm.doc.answer173==\"\u0b85\"){\n\ts=s+0.2;\n\t$(cur_frm.fields_dict.answer173.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer173!=\"\"){\n frm.set_df_property('answer173', 'read_only', 1);\n}\nif(frm.doc.answer174==\"\u0b85\"){\n\ts=s+0.2;\n\t$(cur_frm.fields_dict.answer174.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer174!=\"\"){\n frm.set_df_property('answer174', 'read_only', 1);\n}\nif(frm.doc.answer175==\"\u0b86\"){\n\ts=s+0.2;\n\t$(cur_frm.fields_dict.answer175.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer175!=\"\"){\n frm.set_df_property('answer175', 'read_only', 1);\n}\nif(frm.doc.answer18==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer18.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer18!=\"\"){\n frm.set_df_property('answer18 ', 'read_only', 1);\n}\nif(frm.doc.answer19==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer19.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer19!=\"\"){\n frm.set_df_property('answer19', 'read_only', 1);\n}\nif(frm.doc.answer20==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer20.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer20!=\"\"){\n frm.set_df_property('answer20', 'read_only', 1);\n}\nif(frm.doc.answer21==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer21.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer21!=\"\"){\nfrm.set_df_property('answer21', 'read_only', 1);\n}\nif(frm.doc.answer22==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer22.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer22!=\"\"){\nfrm.set_df_property('answer22', 'read_only', 1);\n}\nif(frm.doc.answer23==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer23.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer23!=\"\"){\nfrm.set_df_property('answer23', 'read_only', 1);\n}\nif(frm.doc.answer24==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer24.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer24!=\"\"){\nfrm.set_df_property('answer24', 'read_only', 1);\n}\nif(frm.doc.answer25==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer25.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer25!=\"\"){\nfrm.set_df_property('answer25', 'read_only', 1);\n}\n\nif(frm.doc.answer26==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer26.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer26!=\"\"){\nfrm.set_df_property('answer26', 'read_only', 1);\n}\nif(frm.doc.answer27==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer27.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer27!=\"\"){\nfrm.set_df_property('answer27', 'read_only', 1);\n}\nif(frm.doc.answer28==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer28.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer28!=\"\"){\nfrm.set_df_property('answer28', 'read_only', 1);\n}\nif(frm.doc.answer29==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer29.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer29!=\"\"){\nfrm.set_df_property('answer29', 'read_only', 1);\n}\nif(frm.doc.answer30==\"\u0b86\"){\n\ts=s+0.5;\n\t$(cur_frm.fields_dict.answer30.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer30!=\"\"){\nfrm.set_df_property('answer30', 'read_only', 1);\n}\nif(frm.doc.answer302==\"\u0b85\"){\n\ts=s+0.5;\n\t$(cur_frm.fields_dict.answer302.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer302!=\"\"){\nfrm.set_df_property('answer302', 'read_only', 1);\n}\nfrm.set_value(\"total_score\",s);\n},\ndate_of_skill_evaluatation: function(frm){\nif(frm.doc.date_of_skill_evaluatation){\nif(frm.doc.date_of_skill_evaluatation > frappe.datetime.nowdate()){\nfrappe.msgprint(\"Future Dates can't be Chosen\")\nfrm.set_value(\"date_of_skill_evaluatation\",\"\")\n}\n}\n\n\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nvalidate: function(frm){\nif(frm.doc.status == \"Left\"){\nfrappe.validated = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\t\n}\nif (!frm.doc.total_score || frm.doc.total_score == 0){\nfrm.trigger(\"test_score_validation\")\n}\n},\nrefresh: function(frm){\n$(cur_frm.fields_dict.evaluate_operator.input).css(\"backgroundColor\",\"#05ffb0\");\nif (!frm.doc.total_score  || frm.doc.total_score == 0){\nfrm.trigger(\"test_score_validation\")\n}\n},\nevaluate_operator: function(frm){\nfrm.save()\nfrappe.set_route(\"Form\",\"Induction Training Machine Area Operator\",\"New Induction Training Machine Area Operator\",{\"employee_code\": frm.doc.employee_code})\n}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "New Joinees Practical Knowledge Verification", 
  "modified": "2019-12-02 11:36:32.116260", 
  "name": "New Joinees Practical Knowledge Verification-Client", 
  "script": "frappe.ui.form.on(\"New Joinees Practical Knowledge Verification\", {\n    employee_code: function (frm) {\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Employee\",\n                name: frm.doc.employee_code\n            },\n            callback: function (r) {\n                if (r.message.status == \"Left\") {\n                    frappe.validated = false;\n                    frappe.msgprint(\"Left Employees are not allowed to write test\")\n\n                } else {\n                    frm.set_value(\"associate\", r.message.employee_name);\n                    frm.set_value(\"shift\", r.message.shift);\n                    frm.set_value(\"line_name\", r.message.line);\n                    frm.set_value(\"date_of_joining\", r.message.date_of_joining);\n                    frm.set_value(\"status\", r.message.status);\n                }\n            }\n        })\n    },\n    grade: function (frm) {\n        if (frm.doc.grade == \"A\") {\n            frm.set_value(\"score\", 5)\n        } else if (frm.doc.grade == \"B\") {\n            frm.set_value(\"score\", 3)\n        } else if (frm.doc.grade == \"C\") {\n            frm.set_value(\"score\", 1)\n        }\n\telse if (frm.doc.grade == \"NA\") {\n            frm.set_value(\"score\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade1: function (frm) {\n        if (frm.doc.grade1 == \"A\") {\n            frm.set_value(\"score1\", 5)\n        } else if (frm.doc.grade1 == \"B\") {\n            frm.set_value(\"score1\", 3)\n        } else if (frm.doc.grade1 == \"C\") {\n            frm.set_value(\"score1\", 1)\n        }\nelse if (frm.doc.grade1 == \"NA\") {\n            frm.set_value(\"score1\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade2: function (frm) {\n        if (frm.doc.grade2 == \"A\") {\n            frm.set_value(\"score2\", 5)\n        } else if (frm.doc.grade2 == \"B\") {\n            frm.set_value(\"score2\", 3)\n        } else if (frm.doc.grade2 == \"C\") {\n            frm.set_value(\"score2\", 1)\n        }\n\telse if (frm.doc.grade2 == \"NA\") {\n            frm.set_value(\"score2\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade3: function (frm) {\n        if (frm.doc.grade3 == \"A\") {\n            frm.set_value(\"score3\", 5)\n        } else if (frm.doc.grade3 == \"B\") {\n            frm.set_value(\"score3\", 3)\n        } else if (frm.doc.grade3 == \"C\") {\n            frm.set_value(\"score3\", 1)\n        }\n\telse if (frm.doc.grade3 == \"NA\") {\n            frm.set_value(\"score3\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade4: function (frm) {\n        if (frm.doc.grade4 == \"A\") {\n            frm.set_value(\"score4\", 5)\n        } else if (frm.doc.grade4 == \"B\") {\n            frm.set_value(\"score4\", 3)\n        } else if (frm.doc.grade4 == \"C\") {\n            frm.set_value(\"score4\", 1)\n        }\n\telse if (frm.doc.grade4 == \"NA\") {\n            frm.set_value(\"score4\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade5: function (frm) {\n        if (frm.doc.grade5 == \"A\") {\n            frm.set_value(\"score5\", 5)\n        } else if (frm.doc.grade5 == \"B\") {\n            frm.set_value(\"score5\", 3)\n        } else if (frm.doc.grade5 == \"C\") {\n            frm.set_value(\"score5\", 1)\n        }\n\telse if (frm.doc.grade5 == \"NA\") {\n            frm.set_value(\"score5\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade6: function (frm) {\n        if (frm.doc.grade6 == \"A\") {\n            frm.set_value(\"score6\", 5)\n        } else if (frm.doc.grade6 == \"B\") {\n            frm.set_value(\"score6\", 3)\n        } else if (frm.doc.grade6 == \"C\") {\n            frm.set_value(\"score6\", 1)\n        }\n\telse if (frm.doc.grade6 == \"NA\") {\n            frm.set_value(\"score6\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade7: function (frm) {\n        if (frm.doc.grade7 == \"A\") {\n            frm.set_value(\"score7\", 5)\n        } else if (frm.doc.grade7 == \"B\") {\n            frm.set_value(\"score7\", 3)\n        } else if (frm.doc.grade7 == \"C\") {\n            frm.set_value(\"score7\", 1)\n        }\n\telse if (frm.doc.grade7 == \"NA\") {\n            frm.set_value(\"score7\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    grade8: function (frm) {\n        if (frm.doc.grade8 == \"A\") {\n            frm.set_value(\"score8\", 5)\n        } else if (frm.doc.grade8 == \"B\") {\n            frm.set_value(\"score8\", 3)\n        } else if (frm.doc.grade8 == \"C\") {\n            frm.set_value(\"score8\", 1)\n        }else if (frm.doc.grade8 == \"C\") {\n            frm.set_value(\"score8\", 1)\n        }\n\telse if (frm.doc.grade8 == \"NA\") {\n            frm.set_value(\"score8\", 0)\n        }\n        frm.trigger(\"test_total\")\n    },\n    before_save: function (frm) {\n        var total = frm.doc.score + frm.doc.score1 + frm.doc.score2 + frm.doc.score3 + frm.doc.score4 + frm.doc.score5 + frm.doc.score6 + frm.doc.score7 + frm.doc.score8\n        frm.set_value(\"total_practical_mark_obtained\",total)\n    },\n    date: function (frm) {\n        if (frm.doc.date) {\n            if (frm.doc.date > frappe.datetime.nowdate()) {\n                frappe.msgprint(\"Future Dates Can't be Chosen\")\n                frm.set_value(\"date\", \"\")\n            }\n        }\n    },\n\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test", 
  "modified": "2021-03-03 16:05:33.466769", 
  "name": "Selection Test-Client", 
  "script": "frappe.ui.form.on(\"Selection Test\", {\n    employee_code: function (frm) {\n        if (frm.doc.employee_code) {\n\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name: frm.doc.employee_code\n                },\n                callback: function (r) {\n                    if (r.message.status == \"Left\") {\n                        frappe.validated = false;\n                        frappe.msgprint(\"Left Employees are not allowed to write test\")\n\n                    } else {\n                        \n                        frm.set_value(\"shift\", r.message.shift);\n                        frm.set_value(\"line_name\", r.message.line);\n                        frm.set_value(\"date_of_joining\", r.message.date_of_joining);\n                        frm.set_value(\"status\", r.message.status);\n                    }\n                }\n            })\n        }\n    },\n    test_score_validation: function (frm) {\n        var s = 0\n        if (frm.doc.answer1 == \"A\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\n        } else if (frm.doc.answer1 != \"\") {\n            frm.set_df_property('answer1', 'read_only', 1);\n\n        }\n        if (frm.doc.answer2 == \"B\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer2 != \"\") {\n            frm.set_df_property('answer2', 'read_only', 1);\n        }\n        if (frm.doc.answer3 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer3 != \"\") {\n            frm.set_df_property('answer3', 'read_only', 1);\n        }\n        if (frm.doc.answer4 == \"\u0b85\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer4 != \"\") {\n            frm.set_df_property('answer4', 'read_only', 1);\n        }\n        if (frm.doc.answer41 == \"\u0b86\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer41.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer41 != \"\") {\n            frm.set_df_property('answer41', 'read_only', 1);\n        }\n        if (frm.doc.answer5 == \"\u0b85\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer5 != \"\") {\n            frm.set_df_property('answer5', 'read_only', 1);\n        }\n        if (frm.doc.answer51 == \"\u0b86\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer51.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer51 != \"\") {\n            frm.set_df_property('answer51', 'read_only', 1);\n        }\n        if (frm.doc.answer14 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer14 != \"\") {\n            frm.set_df_property('answer14', 'read_only', 1);\n        }\n        if (frm.doc.answer15 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer15 != \"\") {\n            frm.set_df_property('answer15', 'read_only', 1);\n        }\n        if (frm.doc.answer6 == \"\u0b85\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer6 != \"\") {\n            frm.set_df_property('answer6', 'read_only', 1);\n        }\n        if (frm.doc.answer61 == \"\u0b87\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer61.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer61 != \"\") {\n            frm.set_df_property('answer61', 'read_only', 1);\n        }\n        if (frm.doc.answer7 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer7 != \"\") {\n            frm.set_df_property('answer7', 'read_only', 1);\n        }\n        if (frm.doc.answer8 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer8 != \"\") {\n            frm.set_df_property('answer8', 'read_only', 1);\n        }\n        if (frm.doc.answer9 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer9 != \"\") {\n            frm.set_df_property('answer9', 'read_only', 1);\n        }\n        if (frm.doc.answer10 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer10 != \"\") {\n            frm.set_df_property('answer10', 'read_only', 1);\n        }\n        if (frm.doc.answer11 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer11 != \"\") {\n            frm.set_df_property('answer11', 'read_only', 1);\n        }\n        if (frm.doc.answer12 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer12 != \"\") {\n            frm.set_df_property('answer12', 'read_only', 1);\n        }\n        if (frm.doc.answer13 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer13 != \"\") {\n            frm.set_df_property('answer13', 'read_only', 1);\n        }\n\n        frm.set_value(\"total_score\", s);\n        if(s >= 9){\n            frm.set_value(\"test_status\", \"Selected\");\n        }\n        else{\n            frm.set_value(\"test_status\", \"Rejected\");\n        }\n    },\n    date_of_skill_evaluatation: function (frm) {\n        if (frm.doc.date_of_skill_evaluatation) {\n            if (frm.doc.date_of_skill_evaluatation > frappe.datetime.nowdate()) {\n                frappe.msgprint(\"Future Dates can't be Chosen\")\n                frm.set_value(\"date_of_skill_evaluatation\", \"\")\n            }\n        }\n\n        var monthNames = [\n            \"Jan\", \"Feb\", \"Mar\",\n            \"Apr\", \"May\", \"Jun\", \"Jul\",\n            \"Aug\", \"Sep\", \"Oct\",\n            \"Nov\", \"Dec\"\n        ];\n        var date = new Date(frm.doc.date_of_skill_evaluatation);\n        var day = date.getDate();\n        var monthIndex = date.getMonth();\n        var year = date.getFullYear();\n        var moe = monthNames[monthIndex] + year;\n        frm.set_value(\"month_of_evaluation\", moe);\n    },\n    validate: function (frm) {\n        frm.trigger(\"test_score_validation\")\n        if (frm.doc.status == \"Left\") {\n            validated = false;\n            frappe.msgprint(\"Left Employees are not allowed to write test\")\n\n        }\n    },\n    refresh: function (frm) {\nif(frm.doc.test_score == 0){\n        frm.trigger(\"test_score_validation\")\nfrm.save()\n}\n    },\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Induction Training Assembly Area", 
  "modified": "2021-01-12 15:55:41.327848", 
  "name": "Induction Training Assembly Area-Client", 
  "script": "frappe.ui.form.on(\"Induction Training Assembly Area\", {\n    employee_code: function (frm) {\n        if (frm.doc.employee_code) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Induction Training Machine Area Crimping\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frappe.msgprint(\"You Already Attended the Induction Training Machine Area Crimping Test\")\n                        frm.set_value(\"employee_code\", \"\")\n                    }\n                }\n            })\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name: frm.doc.employee_code\n                },\n                callback: function (r) {\n                    if (r.message.status == \"Left\") {\n                        frappe.validated = false;\n                        frappe.msgprint(\"Left Employees are not allowed to write test\")\n\n                    } else {\n                        frm.set_value(\"associate\", r.message.employee_name);\n                        frm.set_value(\"shift\", r.message.shift);\n                        frm.set_value(\"line_name\", r.message.line);\n                        frm.set_value(\"date_of_joining\", r.message.date_of_joining);\n                        frm.set_value(\"status\", r.message.status);\n                    }\n                }\n            })\n        }\n    },\n    test_score_validation: function (frm) {\n        var s = 0\n        if (frm.doc.answer1 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\n        } else if (frm.doc.answer1 != \"\") {\n            frm.set_df_property('answer1', 'read_only', 1);\n\n        }\n        if (frm.doc.answer2 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer2 != \"\") {\n            frm.set_df_property('answer2', 'read_only', 1);\n        }\n        if (frm.doc.answer3 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer3 != \"\") {\n            frm.set_df_property('answer3', 'read_only', 1);\n        }\n        if (frm.doc.answer4 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer4 != \"\") {\n            frm.set_df_property('answer4', 'read_only', 1);\n        }\n        if (frm.doc.answer5 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer5 != \"\") {\n            frm.set_df_property('answer5', 'read_only', 1);\n        }\n        if ([\"\u0b85\",\"\u0b87\"].includes(frm.doc.answer6) ) {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer6 != \"\") {\n            frm.set_df_property('answer6', 'read_only', 1);\n        }\n        if (frm.doc.answer7 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer7 != \"\") {\n            frm.set_df_property('answer7', 'read_only', 1);\n        }\n        if (frm.doc.answer8 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer8 != \"\") {\n            frm.set_df_property('answer8', 'read_only', 1);\n        }\n        if (frm.doc.answer9 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer9 != \"\") {\n            frm.set_df_property('answer9', 'read_only', 1);\n        }\n        if (frm.doc.answer10 == \"\u0b85\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer10 != \"\") {\n            frm.set_df_property('answer10', 'read_only', 1);\n        }\n        if (frm.doc.answer102 == \"\u0b88\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer102.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer102 != \"\") {\n            frm.set_df_property('answer102', 'read_only', 1);\n        }\n        if (frm.doc.answer11 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer11 != \"\") {\n            frm.set_df_property('answer11', 'read_only', 1);\n        }\n        if (frm.doc.answer12 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer12 != \"\") {\n            frm.set_df_property('answer12', 'read_only', 1);\n        }\n        if (frm.doc.answer13 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer13 != \"\") {\n            frm.set_df_property('answer13', 'read_only', 1);\n        }\n        if (frm.doc.answer14 == \"\u0b86\") {\n            s = s + 0.3;\n            $(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer14 != \"\") {\n            frm.set_df_property('answer14', 'read_only', 1);\n        }\n        if (frm.doc.answer142 == \"\u0b87\") {\n            s = s + 0.3;\n            $(cur_frm.fields_dict.answer142.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer142 != \"\") {\n            frm.set_df_property('answer142', 'read_only', 1);\n        }\n        if (frm.doc.answer143 == \"\u0b85\") {\n            s = s + 0.4;\n            $(cur_frm.fields_dict.answer143.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer143 != \"\") {\n            frm.set_df_property('answer143', 'read_only', 1);\n        }\n        if (frm.doc.answer15 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer15 != \"\") {\n            frm.set_df_property('answer15', 'read_only', 1);\n        }\n        if (frm.doc.answer16 == \"\u0b85\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer16.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer16 != \"\") {\n            frm.set_df_property('answer16', 'read_only', 1);\n        }\n        if (frm.doc.answer162 == \"\u0b86\") {\n            s = s + 0.5;\n            $(cur_frm.fields_dict.answer162.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer162 != \"\") {\n            frm.set_df_property('answer162', 'read_only', 1);\n        }\n        if (frm.doc.answer17 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer17.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer17 != \"\") {\n            frm.set_df_property('answer17', 'read_only', 1);\n        }\n        if (frm.doc.answer18 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer18.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer18 != \"\") {\n            frm.set_df_property('answer18 ', 'read_only', 1);\n        }\n        if (frm.doc.answer19 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer19.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer19 != \"\") {\n            frm.set_df_property('answer19', 'read_only', 1);\n        }\n        if (frm.doc.answer20 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer20.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer20 != \"\") {\n            frm.set_df_property('answer20', 'read_only', 1);\n        }\n        if (frm.doc.answer21 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer21.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer21 != \"\") {\n            frm.set_df_property('answer21', 'read_only', 1);\n        }\n        if (frm.doc.answer22 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer22.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer22 != \"\") {\n            frm.set_df_property('answer22', 'read_only', 1);\n        }\n        if (frm.doc.answer23 == \"\u0b88\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer23.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer23 != \"\") {\n            frm.set_df_property('answer23', 'read_only', 1);\n        }\n        if (frm.doc.answer232 == \"\u0b85\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer232.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer232 != \"\") {\n            frm.set_df_property('answer232', 'read_only', 1);\n        }\n        if (frm.doc.answer233 == \"\u0b86\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer233.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer233 != \"\") {\n            frm.set_df_property('answer233', 'read_only', 1);\n        }\n\n        if (frm.doc.answer234 == \"\u0b87\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer234.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer234 != \"\") {\n            frm.set_df_property('answer234', 'read_only', 1);\n        }\n\n        if (frm.doc.answer24 == \"\u0b88\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer24.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer24 != \"\") {\n            frm.set_df_property('answer24', 'read_only', 1);\n        }\n        if (frm.doc.answer25 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer25.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer25 != \"\") {\n            frm.set_df_property('answer25', 'read_only', 1);\n        }\n\n        if (frm.doc.answer26 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer26.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer26 != \"\") {\n            frm.set_df_property('answer26', 'read_only', 1);\n        }\n        if (frm.doc.answer27 == \"\u0b87\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer27.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer27 != \"\") {\n            frm.set_df_property('answer27', 'read_only', 1);\n        }\n        if (frm.doc.answer28 == \"\u0b86\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer28.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer28 != \"\") {\n            frm.set_df_property('answer28', 'read_only', 1);\n        }\n        if (frm.doc.answer29 == \"\u0b85\") {\n            s = s + 1;\n            $(cur_frm.fields_dict.answer29.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer29 != \"\") {\n            frm.set_df_property('answer29', 'read_only', 1);\n        }\n        if (frm.doc.answer30 == \"\u0b86\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer30.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer30 != \"\") {\n            frm.set_df_property('answer30', 'read_only', 1);\n        }\n        if (frm.doc.answer302 == \"\u0b85\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer302.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer302 != \"\") {\n            frm.set_df_property('answer302', 'read_only', 1);\n        }\n        if (frm.doc.answer303 == \"\u0b88\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer303.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer303 != \"\") {\n            frm.set_df_property('answer303', 'read_only', 1);\n        }\n        if (frm.doc.answer304 == \"\u0b87\") {\n            s = s + 0.25;\n            $(cur_frm.fields_dict.answer304.input).css(\"backgroundColor\", \"#88ff4d\");\n        } else if (frm.doc.answer304 != \"\") {\n            frm.set_df_property('answer304', 'read_only', 1);\n        }\n        frm.set_value(\"total_score\", s);\n\t\n    },\n    date_of_skill_evaluatation: function (frm) {\n        if (frm.doc.date_of_skill_evaluatation) {\n            if (frm.doc.date_of_skill_evaluatation > frappe.datetime.nowdate()) {\n                frappe.msgprint(\"Future Dates can't be Chosen\")\n                frm.set_value(\"date_of_skill_evaluatation\", \"\")\n            }\n        }\n\n        var monthNames = [\n            \"Jan\", \"Feb\", \"Mar\",\n            \"Apr\", \"May\", \"Jun\", \"Jul\",\n            \"Aug\", \"Sep\", \"Oct\",\n            \"Nov\", \"Dec\"\n        ];\n        var date = new Date(frm.doc.date_of_skill_evaluatation);\n        var day = date.getDate();\n        var monthIndex = date.getMonth();\n        var year = date.getFullYear();\n        var moe = monthNames[monthIndex] + year;\n        frm.set_value(\"month_of_evaluation\", moe);\n    },\n    validate: function (frm) {\n        frm.trigger(\"test_score_validation\")\n        if (frm.doc.status == \"Left\") {\n            validated = false;\n            frappe.msgprint(\"Left Employees are not allowed to write test\")\n\n        }\n        // if (!frm.doc.total_score) {\n        //     frm.trigger(\"test_score_validation\")\n        // }\n    },\n    refresh: function (frm) {\n      \n            frm.trigger(\"test_score_validation\")\n        \n    },\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Induction Training Machine Area Operator", 
  "modified": "2019-10-23 15:54:30.737120", 
  "name": "Induction Training Machine Area Operator-Client", 
  "script": "frappe.ui.form.on(\"Induction Training Machine Area Operator\",{\n\temployee_code: function(frm) {\n                frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name:frm.doc.employee_code\n                },\n                callback: function (r){\n                    if (r.message) {\n                        frm.set_value(\"associate\", r.message.employee_name);\n\t\t\tfrm.set_value(\"shift\",r.message.shift);\n\t\t\tfrm.set_value(\"line_name\",r.message.line);\n\t\t\tfrm.set_value(\"date_of_joining\",r.message.date_of_joining);\nfrm.set_value(\"status\",r.message.status);\n                    }\n                }\n\t})\n\t},\ntest_score_validation: function(frm){\nvar s = 0\nif(frm.doc.answer1==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\t\n}else if(frm.doc.answer1!=\"\"){\n frm.set_df_property('answer1', 'read_only', 1);\n\t\n}\nif(frm.doc.answer2==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer2!=\"\"){\n frm.set_df_property('answer2', 'read_only', 1);\n}\nif(frm.doc.answer3==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer3!=\"\"){\n frm.set_df_property('answer3', 'read_only', 1);\n}\nif(frm.doc.answer4==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer4!=\"\"){\nfrm.set_df_property('answer4', 'read_only', 1);\n}\nif(frm.doc.answer5==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer5!=\"\"){\nfrm.set_df_property('answer5', 'read_only', 1);\n}\nif(frm.doc.answer6==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer6!=\"\"){\nfrm.set_df_property('answer6', 'read_only', 1);\n}\nif(frm.doc.answer7==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer7!=\"\"){\n frm.set_df_property('answer7', 'read_only', 1);\n}\nif(frm.doc.answer8==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer8!=\"\"){\nfrm.set_df_property('answer8', 'read_only', 1);\n}\nif(frm.doc.answer9==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer9!=\"\"){\n frm.set_df_property('answer9', 'read_only', 1);\n}\nif(frm.doc.answer10==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer10!=\"\"){\nfrm.set_df_property('answer10', 'read_only', 1);\n}\nif(frm.doc.answer11==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer11!=\"\"){\n frm.set_df_property('answer11', 'read_only', 1);\n}\nif(frm.doc.answer12==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer122==\"C\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer122.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer122!=\"\"){\nfrm.set_df_property('answer122', 'read_only', 1);\n}\nif(frm.doc.answer123==\"A\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer13==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer13!=\"\"){\n frm.set_df_property('answer13', 'read_only', 1);\n}\nif(frm.doc.answer14==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer14!=\"\"){\n frm.set_df_property('answer14', 'read_only', 1);\n}\n\nif(frm.doc.answer15==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer15!=\"\"){\nfrm.set_df_property('answer15', 'read_only', 1);\n}\nfrm.set_value(\"total_score\",s);\n},\ndate_of_skill_evaluatation: function(frm){\nif(frm.doc.date_of_skill_evaluatation){\nif(frm.doc.date_of_skill_evaluatation > frappe.datetime.nowdate()){\nfrappe.msgprint(\"Future Dates can't be Chosen\")\nfrm.set_value(\"date_of_skill_evaluatation\",\"\")\n}\n}\n\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nvalidate: function(frm){\nif(frm.doc.status != \"Active\"){\nvalidate = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\t\n}\nif (frm.doc.total_score){\nfrm.trigger(\"test_score_validation\")\n}\n},\nrefresh: function(frm){\nif (frm.doc.total_score){\nfrm.trigger(\"test_score_validation\")\n}\n},\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Line and Shift Assignment Tool", 
  "modified": "2019-11-22 18:33:31.769300", 
  "name": "Line and Shift Assignment Tool-Client", 
  "script": "frappe.ui.form.on('Line and Shift Assignment Tool', {\nemployee: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee\n},\ncallback: function(r){\nif(r.message.status != \"Left\"){\nfrm.set_value(\"current_line\",r.message.line)\nfrm.set_value(\"current_shift\",r.message.shift)\nfrm.set_value(\"department\",r.message.department)\nfrm.set_value(\"designation\",r.message.designation)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"date_of_assign\", (frappe.datetime.nowdate()))\nfrm.set_value(\"new_shift\",\"\")\nfrm.set_value(\"new_line\",\"\")\n\n} else {\n\tfrappe.msgprint(\"Left Employee Details will not to be changed\")\n}\n}\n})\n},\ndate_of_assign: function(frm){\nif(frm.doc.date_of_assign){\nif(frm.doc.date_of_assign > frappe.datetime.nowdate()){\nfrappe.msgprint(\"Future Dates can't be Chosen\")\nfrm.set_value(\"date_of_assign\",\"\")\n}\n}\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation", 
  "modified": "2021-01-07 15:24:38.794875", 
  "name": "Assembly Evaluation-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation\",{\nrefresh: function(frm){\nconsole.log(frm.setup_columns)\nfrm.trigger(\"test_score_validation\")\n},\nvalidate:function(frm){\n\nfrm.trigger(\"total\")\nif(!frm.doc.total_score){\nvar date = frappe.datetime.add_days(frappe.datetime.nowdate(), -30);\nif((frm.doc.date_of_joining >= date) && (frm.doc.date_of_joining <= frappe.datetime.nowdate())){\nfrm.set_value(\"skill_level\",\"L1-Trainee\")\n}\n}\nif(frm.doc.status != \"Active\"){\nvalidated = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nfrm.trigger(\"test_score_validation\")\n},\ntest_score_validation: function(frm){\nvar s = 0\nif(frm.doc.answer1==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\t\n}else if(frm.doc.answer1!=\"\"){\n frm.set_df_property('answer1', 'read_only', 1);\n\t\n}\nif(frm.doc.answer2==\"B\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer2!=\"\"){\n frm.set_df_property('answer2', 'read_only', 1);\n}\nif(frm.doc.answer3==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer3!=\"\"){\n frm.set_df_property('answer3', 'read_only', 1);\n}\nif(frm.doc.answer4==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer4!=\"\"){\nfrm.set_df_property('answer4', 'read_only', 1);\n}\nif(frm.doc.answer5==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer5!=\"\"){\nfrm.set_df_property('answer5', 'read_only', 1);\n}\nif(frm.doc.answer6==\"B\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer6!=\"\"){\nfrm.set_df_property('answer6', 'read_only', 1);\n}\nif(frm.doc.answer7==\"500MM\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer7!=\"\"){\n frm.set_df_property('answer7', 'read_only', 1);\n}\nif(frm.doc.answer8==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer8!=\"\"){\n frm.set_df_property('answer8', 'read_only', 1);\n}\nif(frm.doc.answer9==\"A\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer9!=\"\"){\nfrm.set_df_property('answer9', 'read_only', 1);\n}\nif(frm.doc.answer10==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer10!=\"\"){\n frm.set_df_property('answer10', 'read_only', 1);\n}\nif(frm.doc.answer11==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer11!=\"\"){\nfrm.set_df_property('answer11', 'read_only', 1);\n}\nif(frm.doc.answer12==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer13==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer13!=\"\"){\n frm.set_df_property('answer13', 'read_only', 1);\n}\nif(frm.doc.answer14==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer14!=\"\"){\nfrm.set_df_property('answer14', 'read_only', 1);\n}\nif(frm.doc.answer15==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer15!=\"\"){\n frm.set_df_property('answer15', 'read_only', 1);\n}\nif(frm.doc.answer16==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer16.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer16!=\"\"){\n frm.set_df_property('answer16', 'read_only', 1);\n}\nif(frm.doc.answer17==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer17.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer17!=\"\"){\nfrm.set_df_property('answer17', 'read_only', 1);\n}\nif(frm.doc.answer18==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer18.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer18!=\"\"){\nfrm.set_df_property('answer18', 'read_only', 1);\n}\nif(frm.doc.answer19==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer19.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer19!=\"\"){\nfrm.set_df_property('answer19', 'read_only', 1);\n}\nif(frm.doc.answer20==\"C\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer20.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer20!=\"\"){\nfrm.set_df_property('answer20', 'read_only', 1);\n}\nif(frm.doc.answer21==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer21.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer21!=\"\"){\n frm.set_df_property('answer21', 'read_only', 1);\n}\nif(frm.doc.answer22==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer22.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer22!=\"\"){\n frm.set_df_property('answer22', 'read_only', 1);\n}\nif(frm.doc.answer23==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer23.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer23!=\"\"){\n frm.set_df_property('answer23', 'read_only', 1);\n}\nif(frm.doc.answer24==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer24.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer24!=\"\"){\n frm.set_df_property('answer24', 'read_only', 1);\n}\nif(frm.doc.answer25==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer25.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer25!=\"\"){\n frm.set_df_property('answer25', 'read_only', 1);\n}\nif(frm.doc.answer26==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer26.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer26!=\"\"){\nfrm.set_df_property('answer26', 'read_only', 1);\n}\nif(frm.doc.answer27==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer27.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer27!=\"\"){\nfrm.set_df_property('answer27', 'read_only', 1);\n}\nif(frm.doc.answer28==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer28.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer28!=\"\"){\nfrm.set_df_property('answer28', 'read_only', 1);\n}\nif(frm.doc.answer29==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer29.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer29!=\"\"){\nfrm.set_df_property('answer29', 'read_only', 1);\n}\nif(frm.doc.answer30==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer30.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer30!=\"\"){\nfrm.set_df_property('answer30', 'read_only', 1);\n}\nfrm.set_value(\"test_score30\",s);\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ngrade: function(frm){\nif(frm.doc.grade == \"A\"){\nfrm.set_value(\"score\",5)\n} else if(frm.doc.grade == \"B\"){\nfrm.set_value(\"score\",3)\n}else if(frm.doc.grade == \"C\"){\nfrm.set_value(\"score\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade1: function(frm){\nif(frm.doc.grade1 == \"A\"){\nfrm.set_value(\"score1\",5)\n} else if(frm.doc.grade1 == \"B\"){\nfrm.set_value(\"score1\",3)\n}else if(frm.doc.grade1 == \"C\"){\nfrm.set_value(\"score1\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade2: function(frm){\nif(frm.doc.grade2 == \"A\"){\nfrm.set_value(\"score2\",5)\n} else if(frm.doc.grade2 == \"B\"){\nfrm.set_value(\"score2\",3)\n}else if(frm.doc.grade2 == \"C\"){\nfrm.set_value(\"score2\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade3: function(frm){\nif(frm.doc.grade3 == \"A\"){\nfrm.set_value(\"score3\",5)\n} else if(frm.doc.grade3 == \"B\"){\nfrm.set_value(\"score3\",3)\n}else if(frm.doc.grade3 == \"C\"){\nfrm.set_value(\"score3\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade4: function(frm){\nif(frm.doc.grade4 == \"A\"){\nfrm.set_value(\"score4\",5)\n} else if(frm.doc.grade4 == \"B\"){\nfrm.set_value(\"score4\",3)\n}else if(frm.doc.grade4 == \"C\"){\nfrm.set_value(\"score4\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade5: function(frm){\nif(frm.doc.grade5 == \"A\"){\nfrm.set_value(\"score5\",5)\n} else if(frm.doc.grade5 == \"B\"){\nfrm.set_value(\"score5\",3)\n}else if(frm.doc.grade5 == \"C\"){\nfrm.set_value(\"score5\",1)\n}\nfrm.trigger(\"test_total\")\n},\ntest_total: function(frm){\n var total = frm.doc.score + frm.doc.score1 + frm.doc.score2 + frm.doc.score3 + frm.doc.score4 + frm.doc.score5\nfrm.set_value(\"practical_score\",total)\n},\npractical_score: function(frm){\nfrm.trigger(\"total\")\n},\nobservation_score: function(frm){\nfrm.trigger(\"total\")\n},\ntest_score: function(frm){\nfrm.trigger(\"total\")\n},\ntotal : function(frm){\nvar total = frm.doc.practical_score + frm.doc.test_score + frm.doc.observation_score;\nif(total > 100){\nfrappe.validated = false;\n frappe.msgprint(\"Total Score must be less than or equal to 100\");\n}\nfrm.set_value(\"total_score\",total);\n},\nproductivity151: function(frm){\nif(frm.doc.productivity151 > 15){\n frappe.msgprint(\"Score must be less than or equal to 15\");\nfrm.set_value(\"productivity151\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\nobc_total: function(frm){\nvar total = frm.doc.productivity151 + frm.doc.work_quality1 + frm.doc.discipline51 + frm.doc.attendance51\nfrm.set_value(\"observation_score\",total);\n},\nwork_quality1: function(frm){\nif(frm.doc.work_quality1 > 15){\n frappe.msgprint(\"Score must be less than or equal to 15\");\nfrm.set_value(\"work_quality1\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\ndiscipline51: function(frm){\nif(frm.doc.discipline51 > 5){\n frappe.msgprint(\"Score must be less than or equal to 5\");\nfrm.set_value(\"discipline51\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\nattendance51: function(frm){\nif(frm.doc.attendance51 > 5){\n frappe.msgprint(\"Score must be less than or equal to 5\");\nfrm.set_value(\"attendance51\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\ntest_score30: function(frm){\nif(frm.doc.test_score30 > 30){\n frappe.msgprint(\"Score must be less than or equal to 30\");\nfrm.set_value(\"test_score30\",\"\")\n} else {\n frm.set_value(\"test_score\",frm.doc.test_score30)\n}\n},\ntotal_score: function(frm){\nif(frm.doc.total_score > 50 && frm.doc.total_score <= 60){\nfrm.set_value(\"skill_level\",\"L1-Trainee\")\n}\nif(frm.doc.total_score > 60 && frm.doc.total_score <= 75){\nfrm.set_value(\"skill_level\",\"L2-Can Work under Supervision\")\n}\nif(frm.doc.total_score > 75 && frm.doc.total_score <= 90){\nfrm.set_value(\"skill_level\",\"L3-Can Work Independently\")\n}\nif(frm.doc.total_score > 90 && frm.doc.total_score <= 100){\nfrm.set_value(\"skill_level\",\"L4-Can Train Others\")\n}\n},\n\n\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Associate Performance Monitoring Check Sheet", 
  "modified": "2019-11-29 12:58:22.819698", 
  "name": "Associate Performance Monitoring Check Sheet-Client", 
  "script": "frappe.ui.form.on(\"Associate Performance Monitoring Check Sheet\", {\n    employee_code: function (frm) {\n        frm.trigger(\"status_validation\")\n    },\n    onload: function (frm) {\n        frm.trigger(\"update_employee_basics\")\n    },\n    update_employee_basics: function (frm) {\n        if (frm.doc.employee_code) {\n            frappe.call({\n                \"method\": \"frappe.client.get\",\n                args: {\n                    \"doctype\": \"Employee\",\n                    \"name\": frm.doc.employee_code\n                },\n                callback: function (r) {\n                    if (frm.doc.line_name != r.message.line) {\n                        frm.set_value(\"line_name\", r.message.line)\n                        frm.save()\n                    }\n                }\n            })\n        }\n    },\n    validate: function (frm) {\n        if (frm.doc.date15) {\n            frm.set_value('monitoring_status', 'Completed')\n        }\n        frm.trigger(\"status_validation\")\n        frm.trigger(\"update_employee_basics\")\n        if (frm.doc.process_name) {\n            frappe.call({\n                \"method\": \"training.custom.assign_kvs\",\n                args: {\n                    \"employee\": frm.doc.employee_code,\n                    \"process\": frm.doc.process_name\n                },\n                callback: function (r) {\n                }\n            })\n        }\n    },\n    status_validation: function (frm) {\n        if (frm.doc.status == \"Left\") {\n            frappe.validated = false;\n            frappe.msgprint(\"Left Employees are not allowed\")\n\n        }\n    }\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "KVS Type Assignment", 
  "modified": "2019-10-22 15:59:18.852283", 
  "name": "KVS Type Assignment-Client", 
  "script": "frappe.ui.form.on('KVS Type Assignment', {\nemployee: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee\n},\ncallback: function(r){\nif(r.message.status != \"Left\"){\nfrm.set_value(\"line\",r.message.line)\nfrm.set_value(\"shift\",r.message.shift)\nfrm.set_value(\"department\",r.message.department)\nfrm.set_value(\"designation\",r.message.designation)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"date_of_assign\", (frappe.datetime.nowdate()))\n} else {\n\tfrappe.msgprint(\"Left Employee Details will not to be changed\")\n}\n}\n})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Knowledge Verification Sheet", 
  "modified": "2019-10-22 15:59:40.750455", 
  "name": "Knowledge Verification Sheet-Client", 
  "script": "frappe.ui.form.on(\"Knowledge Verification Sheet\",{\nrefresh: function(frm){\nfrm.disable_save();\nfrm.refresh_field(\"status1\")\nfrm.refresh_field(\"status2\")\nfrm.refresh_field(\"status3\")\n if(frm.doc.return == \"Yes\"){\n\tvar ecode = frm.doc.employee_code\n\tvar verify = frm.doc.type_of_verification\n        setTimeout(function() { location.reload() }, 500);\n\tfrm.set_value(\"employee_code\",ecode)\n        frm.set_value(\"type_of_verification\",verify)\n }\n},\nemployee_code: function(frm){\nif(frm.doc.employee_code){\nfrm.refresh_field(\"status1\")\nfrm.refresh_field(\"status2\")\nfrm.refresh_field(\"status3\")\nfrm.add_custom_button(__('Print'), function () {\n                if (frm.doc.status1 == \"Completed\" && frm.doc.status2 == \"Completed\" && frm.doc.status3 == \"Completed\"){\n\t\t\tvar me = this;\n\t\tvar doc = \"Komax Operator Training Observation\"\n                var name = frm.doc.employee_code\n\t\tif(frm.doc.type_of_verification == \"Komax Operator\"){\n                   var print_format = \"Komax Operator Verification Sheet\";\n                } else if(frm.doc.type_of_verification == \"Parts fitting Operator\"){\n                   var print_format = \"Parts fitting Operator Knowledge Verification Sheet\";\n                } else if(frm.doc.type_of_verification == \"Sub assy Process\"){\n                   var print_format = \"Sub Assy Process Knowledge Verification Sheet\";\n                } else if(frm.doc.type_of_verification == \"Tapping Operator\"){\n                   var print_format = \"Tapping Operator Knowledge Verification Sheet\";\n                } else if(frm.doc.type_of_verification == \"Check Board Operator\"){\n                   var print_format = \"Check Board Operator Knowledge Verification Sheet\";\n                }\n\t\tvar w = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n\t\t+\"doctype=\"+encodeURIComponent(\"Komax Operator Training Observation\")\n\t\t+\"&name=\"+encodeURIComponent(name)\n\t\t+\"&trigger_print=1\"\n\t\t+\"&format=\" + print_format\n\t\t+\"&no_letterhead=0\"\n\t\t+(me.lang_code ? (\"&_lang=\"+me.lang_code) : \"\")));\n} else {\nfrappe.msgprint(\"Status of Training,Production and Quality must be Completed\")\n}\n})\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nif(r.message.status != \"Left\"){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n} else {\nfrappe.validated = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\n}\n})\n}\n},\ntraining_observation: function(frm){\nif(frm.doc.type_of_verification){\nfrappe.db.get_value(frm.doc.type_of_verification+\" \"+\"Training Observation\", {employee_code: frm.doc.employee_code}, \"name\",function(value){\nif(value){\n frappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Training Observation\",value.name)\n}else{\nfrappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Training Observation\",\"New Komax Operator Training Observation\",{\"employee_code\": frm.doc.employee_code})\n}\n})\n}\n},\nproduction_observation: function(frm){\nif(frm.doc.type_of_verification){\nfrappe.db.get_value(frm.doc.type_of_verification+\" \"+\"Production Observation\", {employee_code: frm.doc.employee_code}, \"name\",function(value){\nif(value){\n frappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Production Observation\",value.name)\n}else{\nfrappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Production Observation\",\"New Komax Operator Training Observation\",{\"employee_code\": frm.doc.employee_code})\n}\n})\n}\n},\nquality_observation: function(frm){\nif(frm.doc.type_of_verification){\nfrappe.db.get_value(frm.doc.type_of_verification+\" \"+\"Quality Observation\", {employee_code: frm.doc.employee_code}, \"name\",function(value){\nif(value){\n frappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Quality Observation\",value.name)\n}else{\nfrappe.set_route(\"Form\",frm.doc.type_of_verification+\" \"+\"Quality Observation\",\"New Komax Operator Training Observation\",{\"employee_code\": frm.doc.employee_code})\n}\n})\n}\n},\ntype_of_verification: function(frm){\n\tif(frm.doc.type_of_verification == \"Komax Operator\"){\nvar name = frm.doc.employee_code\n\tfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Komax Operator Training Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status1\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status1\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Komax Operator Production Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status2\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status2\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Komax Operator Quality Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status3\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status3\",\"Pending\")\n\t}\n}\n})\n}\nif(frm.doc.type_of_verification == \"Parts fitting Operator\"){\nvar name = frm.doc.employee_code\n\tfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Parts fitting Operator Training Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status1\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status1\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Parts fitting Operator Production Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status2\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status2\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Parts fitting Operator Quality Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status3\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status3\",\"Pending\")\n\t}\n}\n})\n}\nif(frm.doc.type_of_verification == \"Sub assy process\"){\nvar name = frm.doc.employee_code\n\tfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Sub assy process Training Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status1\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status1\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Sub assy process Production Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status2\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status2\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Sub assy process Quality Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status3\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status3\",\"Pending\")\n\t}\n}\n})\n}\nif(frm.doc.type_of_verification == \"Tapping Operator\"){\nvar name = frm.doc.employee_code\n\tfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Tapping Operator Training Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status1\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status1\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Tapping Operator Production Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status2\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status2\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Tapping Operator Quality Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status3\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status3\",\"Pending\")\n\t}\n}\n})\n}\nif(frm.doc.type_of_verification == \"Checker Board Operator\"){\nvar name = frm.doc.employee_code\n\tfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Checker Board Operator Training Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status1\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status1\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Checker Board Operator Production Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status2\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status2\",\"Pending\")\n\t}\n}\n})\nfrappe.call({\n          \"method\": \"frappe.client.get_list\",\n           args:{\n             \"doctype\":\"Checker Board Operator Quality Observation\",\n              filters:{ \n              \"employee_code\" : name\n             }\n             },\n             callback: function(r){\n           if(r.message){\n\tfrm.set_value(\"status3\",\"Completed\")\n\t} else{\n\tfrm.set_value(\"status3\",\"Pending\")\n\t}\n}\n})\n}\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quotation", 
  "modified": "2019-10-22 16:00:01.596161", 
  "name": "Quotation-Client", 
  "script": " frappe.ui.form.on(\"Induction Training Machine Area Operator\",{\n\temployee_code: function(frm) {\n                frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name:frm.doc.employee_code\n                },\n                callback: function (r){\n                    if (r.message) {\n                        frm.set_value(\"associate\", r.message.employee_name);\n\t\t\tfrm.set_value(\"shift\",r.message.shift);\n\t\t\tfrm.set_value(\"line_name\",r.message.line);\n\t\t\tfrm.set_value(\"date_of_joining\",r.message.date_of_joining);\nfrm.set_value(\"status\",r.message.status);\n                    }\n                }\n\t})\n\t},\ntest_score_validation: function(frm){\nvar s = 0\nif(frm.doc.answer1==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\t\n}else if(frm.doc.answer1!=\"\"){\n frm.set_df_property('answer1', 'read_only', 1);\n\t\n}\nif(frm.doc.answer2==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer2!=\"\"){\n frm.set_df_property('answer2', 'read_only', 1);\n}\nif(frm.doc.answer3==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer3!=\"\"){\n frm.set_df_property('answer3', 'read_only', 1);\n}\nif(frm.doc.answer4==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer4!=\"\"){\nfrm.set_df_property('answer4', 'read_only', 1);\n}\nif(frm.doc.answer5==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer5!=\"\"){\nfrm.set_df_property('answer5', 'read_only', 1);\n}\nif(frm.doc.answer6==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer6!=\"\"){\nfrm.set_df_property('answer6', 'read_only', 1);\n}\nif(frm.doc.answer7==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer7!=\"\"){\n frm.set_df_property('answer7', 'read_only', 1);\n}\nif(frm.doc.answer8==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer8!=\"\"){\nfrm.set_df_property('answer8', 'read_only', 1);\n}\nif(frm.doc.answer9==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer9!=\"\"){\n frm.set_df_property('answer9', 'read_only', 1);\n}\nif(frm.doc.answer10==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer10!=\"\"){\nfrm.set_df_property('answer10', 'read_only', 1);\n}\nif(frm.doc.answer11==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer11!=\"\"){\n frm.set_df_property('answer11', 'read_only', 1);\n}\nif(frm.doc.answer12==\"B\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer122==\"C\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer122.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer122!=\"\"){\nfrm.set_df_property('answer122', 'read_only', 1);\n}\nif(frm.doc.answer123==\"A\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer13==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer13!=\"\"){\n frm.set_df_property('answer13', 'read_only', 1);\n}\nif(frm.doc.answer14==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer14!=\"\"){\n frm.set_df_property('answer14', 'read_only', 1);\n}\n\nif(frm.doc.answer15==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer15!=\"\"){\nfrm.set_df_property('answer15', 'read_only', 1);\n}\nfrm.set_value(\"total_score\",s);\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nvalidate: function(frm){\nif(frm.doc.status != \"Active\"){\nvalidate = false;\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\t\n}\nif (frm.doc.total_score){\nfrm.trigger(\"test_score_validation\")\n}\n},\nrefresh: function(frm){\nif (frm.doc.total_score){\nfrm.trigger(\"test_score_validation\")\n}\n},\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation", 
  "modified": "2019-10-22 16:00:26.813483", 
  "name": "Quality Evaluation-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation\",{\nrefresh: function(frm){\nfrm.trigger(\"test_score_validation\")\n},\nvalidate:function(frm){\nfrm.trigger(\"total\")\nif(frm.doc.total_score == 0){\nvar date = frappe.datetime.add_days(frappe.datetime.nowdate(), -30);\nif((frm.doc.date_of_joining >= date) && (frm.doc.date_of_joining <= frappe.datetime.nowdate())){\nfrm.set_value(\"skill_level\",\"L1-Trainee\")\n}\n}\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n\tvalidate = false;\n}\nfrm.trigger(\"test_score_validation\")\n},\ntest_score_validation: function(frm){\nvar s = 0\nif(frm.doc.answer1==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer1.input).css(\"backgroundColor\", \"#88ff4d\");\n\t\n}else if(frm.doc.answer1!=\"\"){\n frm.set_df_property('answer1', 'read_only', 1);\n\t\n}\nif(frm.doc.answer2==\"B\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer2.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer2!=\"\"){\n frm.set_df_property('answer2', 'read_only', 1);\n}\nif(frm.doc.answer3==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer3.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer3!=\"\"){\n frm.set_df_property('answer3', 'read_only', 1);\n}\nif(frm.doc.answer4==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer4.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer4!=\"\"){\nfrm.set_df_property('answer4', 'read_only', 1);\n}\nif(frm.doc.answer5==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer5.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer5!=\"\"){\nfrm.set_df_property('answer5', 'read_only', 1);\n}\nif(frm.doc.answer6==\"B\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer6.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer6!=\"\"){\nfrm.set_df_property('answer6', 'read_only', 1);\n}\nif(frm.doc.answer7==\"500MM\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer7.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer7!=\"\"){\n frm.set_df_property('answer7', 'read_only', 1);\n}\nif(frm.doc.answer8==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer8.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer8!=\"\"){\n frm.set_df_property('answer8', 'read_only', 1);\n}\nif(frm.doc.answer9==\"A\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer9.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer9!=\"\"){\nfrm.set_df_property('answer9', 'read_only', 1);\n}\nif(frm.doc.answer10==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer10.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer10!=\"\"){\n frm.set_df_property('answer10', 'read_only', 1);\n}\nif(frm.doc.answer11==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer11.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer11!=\"\"){\nfrm.set_df_property('answer11', 'read_only', 1);\n}\nif(frm.doc.answer12==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer12.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer12!=\"\"){\nfrm.set_df_property('answer12', 'read_only', 1);\n}\nif(frm.doc.answer13==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer13.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer13!=\"\"){\n frm.set_df_property('answer13', 'read_only', 1);\n}\nif(frm.doc.answer14==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer14.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer14!=\"\"){\nfrm.set_df_property('answer14', 'read_only', 1);\n}\nif(frm.doc.answer15==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer15.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer15!=\"\"){\n frm.set_df_property('answer15', 'read_only', 1);\n}\nif(frm.doc.answer16==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer16.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer16!=\"\"){\n frm.set_df_property('answer16', 'read_only', 1);\n}\nif(frm.doc.answer17==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer17.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer17!=\"\"){\nfrm.set_df_property('answer17', 'read_only', 1);\n}\nif(frm.doc.answer18==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer18.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer18!=\"\"){\nfrm.set_df_property('answer18', 'read_only', 1);\n}\nif(frm.doc.answer19==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer19.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer19!=\"\"){\nfrm.set_df_property('answer19', 'read_only', 1);\n}\nif(frm.doc.answer20==\"C\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer20.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer20!=\"\"){\nfrm.set_df_property('answer20', 'read_only', 1);\n}\nif(frm.doc.answer21==\"\u0b88\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer21.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer21!=\"\"){\n frm.set_df_property('answer21', 'read_only', 1);\n}\nif(frm.doc.answer22==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer22.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer22!=\"\"){\n frm.set_df_property('answer22', 'read_only', 1);\n}\nif(frm.doc.answer23==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer23.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer23!=\"\"){\n frm.set_df_property('answer23', 'read_only', 1);\n}\nif(frm.doc.answer24==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer24.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer24!=\"\"){\n frm.set_df_property('answer24', 'read_only', 1);\n}\nif(frm.doc.answer25==\"\u0b87\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer25.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer25!=\"\"){\n frm.set_df_property('answer25', 'read_only', 1);\n}\nif(frm.doc.answer26==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer26.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer26!=\"\"){\nfrm.set_df_property('answer26', 'read_only', 1);\n}\nif(frm.doc.answer27==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer27.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer27!=\"\"){\nfrm.set_df_property('answer27', 'read_only', 1);\n}\nif(frm.doc.answer28==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer28.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer28!=\"\"){\nfrm.set_df_property('answer28', 'read_only', 1);\n}\nif(frm.doc.answer29==\"\u0b86\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer29.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer29!=\"\"){\nfrm.set_df_property('answer29', 'read_only', 1);\n}\nif(frm.doc.answer30==\"\u0b85\"){\n\ts=s+1;\n\t$(cur_frm.fields_dict.answer30.input).css(\"backgroundColor\", \"#88ff4d\");\n}else if(frm.doc.answer30!=\"\"){\nfrm.set_df_property('answer30', 'read_only', 1);\n}\nfrm.set_value(\"test_score30\",s);\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ngrade: function(frm){\nif(frm.doc.grade == \"A\"){\nfrm.set_value(\"score\",5)\n} else if(frm.doc.grade == \"B\"){\nfrm.set_value(\"score\",3)\n}else if(frm.doc.grade == \"C\"){\nfrm.set_value(\"score\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade1: function(frm){\nif(frm.doc.grade1 == \"A\"){\nfrm.set_value(\"score1\",5)\n} else if(frm.doc.grade1 == \"B\"){\nfrm.set_value(\"score1\",3)\n}else if(frm.doc.grade1 == \"C\"){\nfrm.set_value(\"score1\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade2: function(frm){\nif(frm.doc.grade2 == \"A\"){\nfrm.set_value(\"score2\",5)\n} else if(frm.doc.grade2 == \"B\"){\nfrm.set_value(\"score2\",3)\n}else if(frm.doc.grade2 == \"C\"){\nfrm.set_value(\"score2\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade3: function(frm){\nif(frm.doc.grade3 == \"A\"){\nfrm.set_value(\"score3\",5)\n} else if(frm.doc.grade3 == \"B\"){\nfrm.set_value(\"score3\",3)\n}else if(frm.doc.grade3 == \"C\"){\nfrm.set_value(\"score3\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade4: function(frm){\nif(frm.doc.grade4 == \"A\"){\nfrm.set_value(\"score4\",5)\n} else if(frm.doc.grade4 == \"B\"){\nfrm.set_value(\"score4\",3)\n}else if(frm.doc.grade4 == \"C\"){\nfrm.set_value(\"score4\",1)\n}\nfrm.trigger(\"test_total\")\n},\ngrade5: function(frm){\nif(frm.doc.grade5 == \"A\"){\nfrm.set_value(\"score5\",5)\n} else if(frm.doc.grade5 == \"B\"){\nfrm.set_value(\"score5\",3)\n}else if(frm.doc.grade5 == \"C\"){\nfrm.set_value(\"score5\",1)\n}\nfrm.trigger(\"test_total\")\n},\ntest_total: function(frm){\n var total = frm.doc.score + frm.doc.score1 + frm.doc.score2 + frm.doc.score3 + frm.doc.score4 + frm.doc.score5\nfrm.set_value(\"practical_score\",total)\n},\npractical_score: function(frm){\nfrm.trigger(\"total\")\n},\nobservation_score: function(frm){\nfrm.trigger(\"total\")\n},\ntest_score: function(frm){\nfrm.trigger(\"total\")\n},\ntotal : function(frm){\nvar total = frm.doc.practical_score + frm.doc.test_score + frm.doc.observation_score;\nif(total > 100){\nfrappe.validated = false;\n frappe.msgprint(\"Total Score must be less than or equal to 100\");\n}\nfrm.set_value(\"total_score\",total);\n},\nproductivity151: function(frm){\nif(frm.doc.productivity151 > 15){\n frappe.msgprint(\"Score must be less than or equal to 15\");\nfrm.set_value(\"productivity151\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\nobc_total: function(frm){\nvar total = frm.doc.productivity151 + frm.doc.work_quality1 + frm.doc.discipline51 + frm.doc.attendance51\nfrm.set_value(\"observation_score\",total);\n},\nwork_quality1: function(frm){\nif(frm.doc.work_quality1 > 15){\n frappe.msgprint(\"Score must be less than or equal to 15\");\nfrm.set_value(\"work_quality1\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\ndiscipline51: function(frm){\nif(frm.doc.discipline51 > 5){\n frappe.msgprint(\"Score must be less than or equal to 5\");\nfrm.set_value(\"discipline51\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\nattendance51: function(frm){\nif(frm.doc.attendance51 > 5){\n frappe.msgprint(\"Score must be less than or equal to 5\");\nfrm.set_value(\"attendance51\",\"\")\n} else {\nfrm.trigger(\"obc_total\")\n}\n},\ntest_score30: function(frm){\nif(frm.doc.test_score30 > 30){\n frappe.msgprint(\"Score must be less than or equal to 30\");\nfrm.set_value(\"test_score30\",\"\")\n} else {\n frm.set_value(\"test_score\",frm.doc.test_score30)\n}\n},\ntotal_score: function(frm){\nif(frm.doc.total_score > 50 && frm.doc.total_score <= 60){\nfrm.set_value(\"skill_level\",\"L1-Trainee\")\n}\nif(frm.doc.total_score > 60 && frm.doc.total_score <= 75){\nfrm.set_value(\"skill_level\",\"L2-Can Work under Supervision\")\n}\nif(frm.doc.total_score > 75 && frm.doc.total_score <= 90){\nfrm.set_value(\"skill_level\",\"L3-Can Work Independently\")\n}\nif(frm.doc.total_score > 90 && frm.doc.total_score <= 100){\nfrm.set_value(\"skill_level\",\"L4-Can Train Others\")\n}\n},\n\n\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sub assy process Training Observation", 
  "modified": "2019-10-22 16:00:59.511108", 
  "name": "Sub assy process Training Observation-Client", 
  "script": "frappe.ui.form.on(\"Sub assy process Training Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\nafter_save: function(frm){\nfrappe.set_route(\"Form\",\"Knowledge Verification Sheet\",{\"employee_code\": frm.doc.employee_code,\"return\":\"Yes\"})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sub assy process Production Observation", 
  "modified": "2019-10-22 16:01:28.479052", 
  "name": "Sub assy process Production Observation-Client", 
  "script": "frappe.ui.form.on(\"Sub assy process Production Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\nafter_save: function(frm){\nfrappe.set_route(\"Form\",\"Knowledge Verification Sheet\",{\"employee_code\": frm.doc.employee_code,\"return\":\"Yes\"})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sub assy process Quality Observation", 
  "modified": "2019-10-22 16:02:23.025207", 
  "name": "Sub assy process Quality Observation-Client", 
  "script": "frappe.ui.form.on(\"Sub assy process Quality Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\nafter_save: function(frm){\nfrappe.set_route(\"Form\",\"Knowledge Verification Sheet\",{\"employee_code\": frm.doc.employee_code,\"return\":\"Yes\"})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Komax Operator Training Observation", 
  "modified": "2019-10-22 16:03:06.149480", 
  "name": "Komax Operator Training Observation-Client", 
  "script": "frappe.ui.form.on(\"Komax Operator Training Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\nvalidate: function(frm){\nfrappe.set_route(\"List\",\"Knowledge Verification Sheet\",{employee_code: frm.doc.emplaoyee_code})\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Checker Board Operator Quality Observation", 
  "modified": "2019-10-22 16:03:51.145774", 
  "name": "Checker Board Operator Quality Observation-Client", 
  "script": "frappe.ui.form.on(\"Checker Board Operator Quality Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Checker Board Operator Training Observation", 
  "modified": "2019-10-22 16:24:28.519811", 
  "name": "Checker Board Operator Training Observation-Client", 
  "script": "frappe.ui.form.on(\"Checker Board Operator Training Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Checker Board Operator Production Observation", 
  "modified": "2019-10-22 16:41:02.818508", 
  "name": "Checker Board Operator Production Observation-Client", 
  "script": "frappe.ui.form.on(\"Checker Board Operator Production Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Tapping Operator Production Observation", 
  "modified": "2019-10-22 16:41:34.401707", 
  "name": "Tapping Operator Production Observation-Client", 
  "script": "frappe.ui.form.on(\"Tapping Operator Production Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Tapping Operator Training Observation", 
  "modified": "2019-10-22 16:42:00.289761", 
  "name": "Tapping Operator Training Observation-Client", 
  "script": "frappe.ui.form.on(\"Tapping Operator Training Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Tapping Operator Quality Observation", 
  "modified": "2019-10-22 16:43:27.314377", 
  "name": "Tapping Operator Quality Observation-Client", 
  "script": "frappe.ui.form.on(\"Tapping Operator Quality Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Parts fitting Operator Quality Observation", 
  "modified": "2019-10-22 16:44:25.673004", 
  "name": "Parts fitting Operator Quality Observation-Client", 
  "script": "frappe.ui.form.on(\"Parts fitting Operator Quality Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Parts fitting Operator Production Observation", 
  "modified": "2019-10-22 16:45:12.169203", 
  "name": "Parts fitting Operator Production Observation-Client", 
  "script": "frappe.ui.form.on(\"Parts fitting Operator Production Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Parts fitting Operator Training Observation", 
  "modified": "2019-10-22 16:47:12.662829", 
  "name": "Parts fitting Operator Training Observation-Client", 
  "script": "frappe.ui.form.on(\"Parts fitting Operator Training Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Komax Operator Quality Observation", 
  "modified": "2019-10-22 16:47:44.253449", 
  "name": "Komax Operator Quality Observation-Client", 
  "script": "frappe.ui.form.on(\"Komax Operator Quality Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Komax Operator Production Observation", 
  "modified": "2019-10-22 16:48:11.510693", 
  "name": "Komax Operator Production Observation-Client", 
  "script": "frappe.ui.form.on(\"Komax Operator Production Observation\",{\nonload: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"employee_name\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\n}\n})\n},\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Associate Performance Monitoring", 
  "modified": "2019-12-03 18:53:06.486028", 
  "name": "Associate Performance Monitoring-Client", 
  "script": "frappe.ui.form.on('Associate Performance Monitoring', {\n    onload(frm) {\n        frm.fields_dict.monitoring_single_table.grid.get_field('process_name').get_query =\n            function () {\n                return {\n                    filters: {\n                        line_name : ('like',frm.doc.line_name + '%')\n                    }\n                }\n            }\n    },\n    refresh(frm) {\n        frm.disable_save();\n    },\n    get_associates: function (frm) {\n        if (frm.doc.monitoring_single_table) {\n            frappe.call({\n                method: \"training.training.doctype.associate_performance_monitoring_check_sheet.associate_performance_monitoring_check_sheet.associate_monitoring\",\n                args: {\n                    'date': frm.doc.monitoring_date,\n                    'line': frm.doc.line_name || Null,\n                    'shift': frm.doc.shift || Null\n                },\n                filters: [],\n                callback: function (r) {\n                    if (frm.doc.monitoring_single_table) {\n                        $.each(r.message, function (i, d) {\n                            var row = frappe.model.add_child(frm.doc, \"Monitoring Single Table\", \"monitoring_single_table\");\n                            row.employee = d.name;\n                            row.employee_name = d.associate;\n                            row.shift = d.shift;\n                            row.line = d.line_name;\n                        })\n                        refresh_field(\"monitoring_single_table\");\n                    }\n                }\n            })\n        }\n    },\n    submit: function (frm) {\n        frappe.call({\n            method: \"training.training.doctype.associate_performance_monitoring_check_sheet.associate_performance_monitoring_check_sheet.mark_monitoring\",\n            args: {\n                'child': frm.doc.monitoring_single_table,\n                'monitoring_date': frm.doc.monitoring_date\n            },\n            callback: function (r) {\n                if (r.message) {\n                    frappe.msgprint(\"Successfully Monitoring Completed\")\n                    cur_frm.clear_table(\"monitoring_single_table\");\n                    cur_frm.refresh_fields(\"monitoring_single_table\");\n                    frm.set_value(\"monitoring_date\", \"\");\n\t\t\tfrm.set_value(\"line_name\", \"\");\n\t\t\tfrm.set_value(\"shift\", \"\");\n                }\n            }\n        })\n    }\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Color Blindness Test", 
  "modified": "2019-12-06 12:18:05.879340", 
  "name": "Color Blindness Test-Client", 
  "script": "frappe.ui.form.on(\"Color Blindness Test\",{\nrefresh(frm){\n}\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee Checkin", 
  "modified": "2019-12-15 16:26:08.183682", 
  "name": "Employee Checkin-Client", 
  "script": "frappe.ui.form.on(\"Employee Checkin\",{\n    on_submit:function(frm){ \n        frappe.call({ method:\"minda_custom.minda_custom.doctype.employee_checkin.employee_checkin.attendance\", \n        args:{\n            \"device_id\":frm.doc.device_id,\n            \"date\":frm.doc.date,\n            \"log_date\":frm.doc.log_date,\n            \"log_time\":frm.doc.log_time,\n            \"user_id\":frm.doc.employee,\n\t    \"device_log_id\":frm.doc.device_log_id\n         },\n        })\n    }\n})\n\n\n\n\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Employee Performance Summary Report", 
  "modified": "2020-12-19 12:36:09.705370", 
  "name": "Employee Details Tracking Sheet List-Client", 
  "script": "frappe.ui.form.on(\"Employee Performance Summary Report\", {\n    refresh: function (frm) {\n        frm.disable_save();\n        frm.add_custom_button(__(\"Print\"), function () {\n            var f_name = frm.doc.name\n            var print_format = \"Employee Performance Summary Report\";\n            window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                + \"doctype=\" + encodeURIComponent(\"Employee Performance Summary Report\")\n                + \"&name=\" + encodeURIComponent(f_name)\n                + \"&trigger_print=1\"\n                + \"&format=\" + print_format\n                + \"&no_letterhead=0\"\n            ));\n\n\n        })\n        cur_frm.fields_dict['employee_line_and_shift_details'].grid.wrapper.find('.grid-add-row').hide();\n        cur_frm.fields_dict['employee_line_and_shift_details'].grid.wrapper.find('.grid-remove-rows').hide();\n        cur_frm.fields_dict['edt_assembly_details'].grid.wrapper.find('.grid-add-row').hide();\n        cur_frm.fields_dict['edt_assembly_details'].grid.wrapper.find('.grid-remove-rows').hide();\n        cur_frm.fields_dict['edt_crimping_details'].grid.wrapper.find('.grid-add-row').hide();\n        cur_frm.fields_dict['edt_crimping_details'].grid.wrapper.find('.grid-remove-rows').hide();\n        cur_frm.fields_dict['edt_komax_details'].grid.wrapper.find('.grid-add-row').hide();\n        cur_frm.fields_dict['edt_komax_details'].grid.wrapper.find('.grid-remove-rows').hide();\n    },\n    onload: function (frm) {\n        if (frm.doc.employee_code) {\n            frm.trigger(\"employee_code\")\n        }\n        if (frm.doc.selection_test == \"Pending\") {\n            frm.set_value(\"selection_status\", \"-\")\n        }\n        else if (frm.doc.selection_test >= 9) {\n            frm.set_value(\"selection_status\", \"Selected\")\n        }\n        else {\n            frm.set_value(\"selection_status\", \"Rejected\")\n        }\n\n    },\n    validate: function (frm) {\n        frm.set_value(\"employee_code1\", frm.doc.employee_code)\n    },\n    selection_test: function (frm) {\n\n\n    },\n    employee_code: function (frm) {\n        if (frm.doc.employee_code) {\n            frappe.call({\n                method: \"frappe.client.get\",\n                args: {\n                    doctype: \"Employee\",\n                    name: frm.doc.employee_code\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"image\", r.message.image);\n                        frm.set_value(\"associate\", r.message.employee_name);\n                        frm.set_value(\"department\", r.message.department);\n                        frm.set_value(\"designation\", r.message.designation);\n                        frm.set_value(\"shift\", r.message.shift);\n                        frm.set_value(\"line_name\", r.message.line);\n                        frm.set_value(\"date_of_joining\", r.message.date_of_joining);\n                    }\n                }\n            })\n\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Line and Shift Assignment Details\",\n                    filters: {\n                        \"employee\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        $.each(r.message, function (i, d) {\n                            frappe.call({\n                                \"method\": \"frappe.client.get\",\n                                args: {\n                                    \"doctype\": \"Line and Shift Assignment Details\",\n                                    \"name\": d.name\n                                },\n                                callback: function (r) {\n                                    if (r.message) {\n                                        if (frm.doc.employee_line_and_shift_details) {\n                                            cur_frm.clear_table(\"employee_line_and_shift_details\"); var row = frappe.model.add_child(frm.doc, \"Employee Line and Shift Details\", \"employee_line_and_shift_details\");\n                                            if (r.message.current_line == r.message.new_line) {\n                                                row.existed_line = r.message.current_line;\n                                                row.revised_line = \"-\";\n                                            }\n                                            else {\n                                                row.existed_line = r.message.current_line;\n                                                row.revised_line = r.message.new_line;\n                                            }\n                                            if (r.message.current_shift == r.message.new_shift) {\n                                                row.existed_shift = r.message.current_shift;\n                                                row.revised_shift = \"-\";\n                                            }\n                                            else {\n                                                row.existed_shift = r.message.current_shift;\n                                                row.revised_shift = r.message.new_shift;\n                                            }\n                                            row.assigned_date = r.message.date_of_assign;\n                                        }\n                                        refresh_field(\"employee_line_and_shift_details\");\n                                    }\n                                }\n                            })\n                        })\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"KVS Type Assignment\",\n                    filters: {\n                        \"employee\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        $.each(r.message, function (i, d) {\n                            frappe.call({\n                                \"method\": \"frappe.client.get\",\n                                args: {\n                                    \"doctype\": \"KVS Type Assignment\",\n                                    \"name\": d.name\n                                },\n                                callback: function (r) {\n                                    frm.set_value(\"type\", r.message.knowledge_verification_type)\n                                }\n                            })\n                        })\n                    }\n                }\n            })\n\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Induction Training Machine Area Crimping\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        $.each(r.message, function (i, d) {\n                            frappe.call({\n                                \"method\": \"frappe.client.get\",\n                                args: {\n                                    \"doctype\": \"Induction Training Machine Area Crimping\",\n                                    \"name\": d.name\n                                },\n                                callback: function (r) {\n                                    if (r.message.is_machine_area_operator_applicable != \"1\") {\n                                        frm.set_value(\"status_ma\", \"Completed\")\n                                        frm.set_value(\"score_ma\", r.message.total_score)\n                                        frm.set_value(\"status_mao\", \"Not Applicable\")\n                                        frm.set_value(\"score_mao\", \"-\")\n                                        frm.set_value(\"status_aa\", \"Not Applicable\")\n                                        frm.set_value(\"score_aa\", \"-\")\n                                    }\n                                    else if (r.message.is_machine_area_operator_applicable == \"1\") {\n                                        frm.set_value(\"score_ma\", r.message.total_score)\n                                        if (r.message.total_score >= 15) {\n                                            frm.set_value(\"status_ma\", \"Selected\")\n                                        }\n                                        else{\n                                            frm.set_value(\"status_ma\", \"Rejected\")\n                                        }\n                                        frm.set_value(\"status_aa\", \"Not Applicable\")\n                                        frm.set_value(\"score_aa\", \"-\")\n\n                                        frappe.call({\n                                            \"method\": \"frappe.client.get_list\",\n                                            args: {\n                                                \"doctype\": \"Induction Training Machine Area Operator\",\n                                                filters: {\n                                                    \"employee_code\": frm.doc.employee_code\n                                                }\n                                            },\n                                            callback: function (r) {\n                                                if (r.message) {\n                                                    $.each(r.message, function (i, d) {\n                                                        frappe.call({\n                                                            \"method\": \"frappe.client.get\",\n                                                            args: {\n                                                                \"doctype\": \"Induction Training Machine Area Operator\",\n                                                                \"name\": d.name\n                                                            },\n                                                            callback: function (r) {\n                                                                frm.set_value(\"score_mao\", r.message.total_score)\n                                                                if (r.message.total_score >= 10.5) {\n                                                                    frm.set_value(\"status_mao\", \"Selected\")\n                                                                }\n                                                                else{\n                                                                    frm.set_value(\"status_mao\", \"Rejected\")\n                                                                }\n                                                            }\n                                                        })\n                                                    })\n                                                } else {\n                                                    frm.set_value(\"status_mao\", \"Pending\")\n                                                    frm.set_value(\"score_mao\", \"-\")\n                                                }\n                                            }\n                                        })\n                                    }\n                                }\n                            })\n                        })\n                    } else {\n                        frappe.call({\n                            \"method\": \"frappe.client.get_list\",\n                            args: {\n                                \"doctype\": \"Induction Training Assembly Area\",\n                                filters: {\n                                    \"employee_code\": frm.doc.employee_code\n                                }\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    $.each(r.message, function (i, d) {\n                                        frappe.call({\n                                            \"method\": \"frappe.client.get\",\n                                            args: {\n                                                \"doctype\": \"Induction Training Assembly Area\",\n                                                \"name\": d.name\n                                            },\n                                            callback: function (r) {\n                                                frm.set_value(\"score_aa\", r.message.total_score)\n                                                if (r.message.total_score >= 15) {\n                                                    frm.set_value(\"status_aa\", \"Selected\")\n                                                }\n                                                else{\n                                                    frm.set_value(\"status_aa\", \"Rejected\")\n                                                }\n                                                frm.set_value(\"status_ma\", \"Not Applicable\")\n                                                frm.set_value(\"score_ma\", \"-\")\n                                                frm.set_value(\"status_mao\", \"Not Applicable\")\n                                                frm.set_value(\"score_mao\", \"-\")\n                                            }\n                                        })\n                                    })\n                                } else {\n                                    frm.set_value(\"status_aa\", \"Pending\")\n                                    frm.set_value(\"score_aa\", \"-\")\n                                }\n                            }\n                        })\n                        frm.set_value(\"status_ma\", \"Pending\")\n                        frm.set_value(\"score_ma\", \"-\")\n                        frm.set_value(\"status_mao\", \"Pending\")\n                        frm.set_value(\"score_mao\", \"-\")\n                    }\n                }\n            })\n\n            // frappe.call({\n            //     \"method\": \"frappe.client.get_list\",\n            //     args:{\n            //     \"doctype\": \"Assembly Evaluation\",\n            //     filters:{\n            //     \"employee_code\": frm.doc.employee_code\n            //     }\n            //     },\n            //     callback: function(r){\n            // if(r.message){\n            //         $.each(r.message, function (i, d) {\n            //     frappe.call({\n            //     \"method\": \"frappe.client.get\",\n            //     args:{\n            //     \"doctype\": \"Assembly Evaluation\",\n            //     \"name\": d.name\n\n            //     },\n            //     callback: function(r){\n            // console.log(\"hi\")\n            //      frm.set_value(\"status_wct\",r.message.grade)\n            //      frm.set_value(\"score_wct\",r.message.score)\n            // frm.set_value(\"status_mi\",r.message.grade1)\n            //      frm.set_value(\"score_mi\",r.message.score1)\n            // frm.set_value(\"status_ti\",r.message.grade2)\n            //      frm.set_value(\"score_ti\",r.message.score2)\n            // frm.set_value(\"status_ci\",r.message.grade3)\n            //      frm.set_value(\"score_ci\",r.message.score3)\n            // frm.set_value(\"status_sat\",r.message.grade4)\n            //      frm.set_value(\"score_sat\",r.message.score4)\n            // frm.set_value(\"status_tt\",r.message.grade5)\n            //      frm.set_value(\"score_tt\",r.message.score5)\n            //     }\n            //     })\n            //     })\n            // } else {\n            // console.log(\"ok\")\n            //      frm.set_value(\"status_wct\",\"Pending\")\n            //      frm.set_value(\"score_wct\",\"-\")\n            // frm.set_value(\"status_mi\",\"Pending\")\n            //      frm.set_value(\"score_mi\",\"-\")\n            // frm.set_value(\"status_ti\",\"Pending\")\n            //      frm.set_value(\"score_ti\",\"-\")\n            // frm.set_value(\"status_ci\",\"Pending\")\n            //      frm.set_value(\"score_ci\",\"-\")\n            // frm.set_value(\"status_sat\",\"Pending\")\n            //      frm.set_value(\"score_sat\",\"-\")\n            // frm.set_value(\"status_tt\",\"Pending\")\n            //      frm.set_value(\"score_tt\",\"-\")\n            // }\n            //     }\n            //     })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"New Joinees Practical Knowledge Verification\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        $.each(r.message, function (i, d) {\n                            frappe.call({\n                                \"method\": \"frappe.client.get\",\n                                args: {\n                                    \"doctype\": \"New Joinees Practical Knowledge Verification\",\n                                    \"name\": d.name\n\n                                },\n                                callback: function (r) {\n                                    // console.log(\"hi\")\n                                    frm.set_value(\"status_wct\", r.message.grade)\n                                    frm.set_value(\"score_wct\", r.message.score)\n                                    frm.set_value(\"status_mi\", r.message.grade1)\n                                    frm.set_value(\"score_mi\", r.message.score1)\n                                    frm.set_value(\"status_ti\", r.message.grade2)\n                                    frm.set_value(\"score_ti\", r.message.score2)\n                                    frm.set_value(\"status_ci\", r.message.grade3)\n                                    frm.set_value(\"score_ci\", r.message.score3)\n                                    frm.set_value(\"status_sat\", r.message.grade4)\n                                    frm.set_value(\"score_sat\", r.message.score4)\n                                    frm.set_value(\"status_tt\", r.message.grade5)\n                                    frm.set_value(\"score_tt\", r.message.score5)\n                                    frm.set_value(\"score_cd\", r.message.score6)\n                                    frm.set_value(\"status_cd\", r.message.grade6)\n                                    frm.set_value(\"score_mih\", r.message.score8)\n                                    frm.set_value(\"status_mih\", r.message.grade8)\n                                    frm.set_value(\"score_ct\", r.message.score7)\n                                    frm.set_value(\"status_ct\", r.message.grade7)\n                                }\n                            })\n                        })\n                    } else {\n                        // console.log(\"ok\")\n                        frm.set_value(\"status_wct\", \"Pending\")\n                        frm.set_value(\"score_wct\", \"-\")\n                        frm.set_value(\"status_mi\", \"Pending\")\n                        frm.set_value(\"score_mi\", \"-\")\n                        frm.set_value(\"status_ti\", \"Pending\")\n                        frm.set_value(\"score_ti\", \"-\")\n                        frm.set_value(\"status_ci\", \"Pending\")\n                        frm.set_value(\"score_ci\", \"-\")\n                        frm.set_value(\"status_sat\", \"Pending\")\n                        frm.set_value(\"score_sat\", \"-\")\n                        frm.set_value(\"status_tt\", \"Pending\")\n                        frm.set_value(\"score_tt\", \"-\")\n                        frm.set_value(\"score_cd\", \"-\")\n                        frm.set_value(\"status_cd\", \"Pending\")\n                        frm.set_value(\"score_mih\", \"-\")\n                        frm.set_value(\"status_mih\", \"Pending\")\n                        frm.set_value(\"score_ct\", \"-\")\n                        frm.set_value(\"status_ct\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_value\",\n                args: {\n                    \"doctype\": \"Selection Test\",\n                    filters: {\n                        \"name\": frm.doc.employee_code\n                    },\n                    fieldname: [\"total_score\", \"test_status\"]\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"selection_test\", r.message.total_score)\n                        frm.set_value(\"selection_status\", r.message.test_status)\n                    }\n                    else {\n                        frm.set_value(\"selection_test\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_value\",\n                args: {\n                    \"doctype\": \"Color Blindness Test\",\n                    filters: {\n                        \"name\": frm.doc.employee_code\n                    },\n                    fieldname: [\"total_score\", \"result\"]\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"color_blindness_test\", r.message.total_score)\n                        frm.set_value(\"color_blindness_status\", r.message.result)\n                    }\n                    else {\n                        frm.set_value(\"color_blindness_test\", \"Pending\")\n                    }\n                }\n\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Associate Performance Monitoring Check Sheet\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_md\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_md\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Komax Operator Training Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_k\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_k\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Komax Operator Production Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_k1\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_k1\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Komax Operator Quality Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_k2\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_k2\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Parts fitting Operator Training Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_p\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_p\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Parts fitting Operator Production Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_p1\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_p1\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Parts fitting Operator Quality Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_p2\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_p2\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Sub assy process Training Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_sap\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_sap\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Sub assy process Production Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_sap1\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_sap1\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Sub assy process Quality Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_sap2\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_sap2\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Tapping Operator Training Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_to\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_to\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Tapping Operator Production Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_to1\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_to1\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Tapping Operator Quality Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_to2\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_to2\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Checker Board Operator Training Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_cbo\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_cbo\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Checker Board Operator Production Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_cbo1\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_cbo1\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Checker Board Operator Quality Observation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        frm.set_value(\"status_cbo2\", \"Completed\")\n                    } else {\n                        frm.set_value(\"status_cbo2\", \"Pending\")\n                    }\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Auto Cutting and Crimping\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Auto Cutting and Crimping\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if (frm.doc.edt_komax_details) {\n                                        cur_frm.clear_table(\"edt_komax_details\");\n                                        var row = frappe.model.add_child(frm.doc, \"EDT Komax Details\", \"edt_komax_details\");\n                                        row.name1 = r.message.name\n                                        row.month_of_evaluation = r.message.month_of_evaluation\n                                        row.line_name = r.message.line_name\n                                        row.score = r.message.total_practical_mark_obtained\n                                        row.legend = r.message.legend\n                                        if (r.message.gamma == 1) {\n                                            row.process_name = \"Gamma\"\n                                        }\n                                        else if (r.message.kodera == 1) {\n                                            row.process_name = \"Kodera\"\n                                        }\n                                        frm.refresh_field(\"edt_komax_details\")\n                                    }\n                                }\n                            }\n                        })\n                    })\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Semi Auto Crimping\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Semi Auto Crimping\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\n                                    if (frm.doc.edt_crimping_details) {\n                                        cur_frm.clear_table(\"edt_crimping_details\");\n                                        var row = frappe.model.add_child(frm.doc, \"EDT Crimping Details\", \"edt_crimping_details\");\n                                        row.name1 = r.message.name\n                                        row.month_of_evaluation = r.message.month_of_evaluation\n                                        row.line_name = r.message.line_name\n                                        row.score = r.message.total_practical_mark_obtained\n                                        row.legend = r.message.legend\n                                        if (r.message.crimp == 1) {\n                                            row.process_name = \"Operator\"\n                                        }\n                                        else if (r.message.usw_hs == 1) {\n                                            row.process_name = \"P.F / MJH\"\n                                        }\n                                        else if (r.message.jt_hst_pf == 1) {\n                                            row.process_name = \"H.S / USW\"\n                                        }\n                                        else if (r.message.midst_twist == 1) {\n                                            row.process_name = \"Twisting /MID Strip\"\n                                        }\n                                        else if (r.message.mjh == 1) {\n                                            row.process_name = \"HST / J.T\"\n                                        }\n                                        frm.refresh_field(\"edt_crimping_details\")\n                                    }\n                                }\n                            }\n                        })\n                    })\n                }\n            })\n            frappe.call({\n                \"method\": \"frappe.client.get_list\",\n                args: {\n                    \"doctype\": \"Assembly Evaluation\",\n                    filters: {\n                        \"employee_code\": frm.doc.employee_code\n                    }\n                },\n                callback: function (r) {\n                    $.each(r.message, function (i, d) {\n                        frappe.call({\n                            \"method\": \"frappe.client.get\",\n                            args: {\n                                \"doctype\": \"Assembly Evaluation\",\n                                \"name\": d.name\n                            },\n                            callback: function (r) {\n                                if (r.message) {\nconsole.log(r.message)\n                                    if (frm.doc.edt_assembly_details) {\n                                        cur_frm.clear_table(\"edt_assembly_details\");\n                                        var row = frappe.model.add_child(frm.doc, \"EDT Assembly Details\", \"edt_assembly_details\");\n                                        row.name1 = r.message.name\n                                        row.month_of_evaluation = r.message.month_of_evaluation\n                                        row.line_name = r.message.line_name\n                                        row.score = r.message.total_score\n                                        row.legend = r.message.skill_level\n                                        if (r.message.cable_bunching_sub_assy == 1) {\n                                            row.process_name = \"Cable Bunching /Sub Assy\"\n                                        }\n                                        else if (r.message.laying == 1) {\n                                            row.process_name = \"Laying\"\n                                        }\n                                        else if (r.message.tapping == 1) {\n                                            row.process_name = \"Tapping\"\n                                        }\n                                        else if (r.message.ckt_packing == 1) {\n                                            row.process_name = \"Ckt board /Tie Assy\"\n                                        }\n                                        else if (r.message.parts_fitting == 1) {\n                                            row.process_name = \"Grease /Packing\"\n                                        }\n                                        frm.refresh_field(\"edt_assembly_details\")\n                                    }\n                                }\n                            }\n                        })\n                    })\n                }\n            })\n        }\n        frm.save();\n    },\n    komax: function (frm) {\n        if (frm.doc.status_k == \"Completed\") {\n            frappe.set_route(\"Form\", \"Komax Operator Training Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    komax1: function (frm) {\n        if (frm.doc.status_k1 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Komax Operator Production Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    komax2: function (frm) {\n        if (frm.doc.status_k2 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Komax Operator Quality Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    parts_fitting_operator: function (frm) {\n        if (frm.doc.status_p == \"Completed\") {\n            frappe.set_route(\"Form\", \"Parts fitting Operator Training Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    parts_fitting_operator1: function (frm) {\n        if (frm.doc.status_p1 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Parts fitting Operator Production Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    parts_fitting_operator2: function (frm) {\n        if (frm.doc.status_p2 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Parts fitting Operator Quality Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    sub_assy_process: function (frm) {\n        if (frm.doc.status_sap == \"Completed\") {\n            frappe.set_route(\"Form\", \"Sub assy process Training Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    sub_assy_process1: function (frm) {\n        if (frm.doc.status_sap1 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Sub assy process Production Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    sub_assy_process2: function (frm) {\n        if (frm.doc.status_sap2 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Sub assy process Quality Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    tapping_operator: function (frm) {\n        if (frm.doc.status_to == \"Completed\") {\n            frappe.set_route(\"Form\", \"Tapping Operator Training Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    tapping_operator1: function (frm) {\n        if (frm.doc.status_to1 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Tapping Operator Production Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    tapping_operator2: function (frm) {\n        if (frm.doc.status_to2 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Tapping Operator Quality Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    checker_board_operator: function (frm) {\n        if (frm.doc.status_cbo == \"Completed\") {\n            frappe.set_route(\"Form\", \"Checker Board Operator Training Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    checker_board_operator1: function (frm) {\n        if (frm.doc.status_cbo1 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Checker Board Operator Production Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    checker_board_operator2: function (frm) {\n        if (frm.doc.status_cbo2 == \"Completed\") {\n            frappe.set_route(\"Form\", \"Checker Board Operator Quality Observation\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    monitoring: function (frm) {\n        if (frm.doc.status_md == \"Completed\") {\n            frappe.set_route(\"Form\", \"Associate Performance Monitoring Check Sheet\", frm.doc.employee_code)\n        } else {\n            frappe.msgprint(\"The Process is Pending\")\n        }\n    },\n    process_ma: function (frm) {\n        if (frm.doc.status_ma == \"Pending\") {\n            frappe.set_route(\"Form\", \"Induction Training Machine Area Crimping\", \"New Induction Training Machine Area Crimping\", { \"employee_code\": frm.doc.employee_code })\n        } else if (frm.doc.status_ma == \"Completed\") {\n            frappe.set_route(\"Form\", \"Induction Training Machine Area Crimping\", frm.doc.employee_code)\n        }\n    },\n    process_aa: function (frm) {\n        if (frm.doc.status_aa == \"Pending\") {\n            frappe.set_route(\"Form\", \"Induction Training Assembly Area\", \"New Induction Training Assembly Area\", { \"employee_code\": frm.doc.employee_code })\n        } else if (frm.doc.status_aa == \"Completed\") {\n            frappe.set_route(\"Form\", \"Induction Training Assembly Area\", frm.doc.employee_code)\n        }\n    },\n    process_mao: function (frm) {\n        if (frm.doc.status_mao == \"Pending\" && frm.doc.process_ma == \"Completed\") {\n            frappe.set_route(\"Form\", \"Induction Training Machine Area Operator\", \"New Induction Training Machine Area Operator\", { \"employee_code\": frm.doc.employee_code })\n        } else if (frm.doc.status_mao == \"Completed\" && frm.doc.process_ma == \"Completed\") {\n            frappe.set_route(\"Form\", \"Induction Training Machine Area Operator\", frm.doc.employee_code)\n        }\n    },\n    selection_test_link: function (frm) {\n        if (frm.doc.selection_test) {\n            frappe.set_route(\"Form\", \"Selection Test\", frm.doc.employee_code)\n        } else {\n            frappe.set_route(\"Form\", \"Selection Test\", \"New Selection Test\", { \"employee_code\": frm.doc.employee_code })\n        }\n    }\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation Set 1", 
  "modified": "2021-01-11 10:17:33.003945", 
  "name": "Assembly Evaluation Set 1-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation Set 1\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.assembly_evaluation.assembly_evaluation.create_assembly_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                        frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation Set 2", 
  "modified": "2021-01-11 10:25:52.735147", 
  "name": "Assembly Evaluation Set 2-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation Set 2\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.assembly_evaluation.assembly_evaluation.create_assembly_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation Set 3", 
  "modified": "2021-01-11 10:25:35.271621", 
  "name": "Assembly Evaluation Set 3-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation Set 3\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.assembly_evaluation.assembly_evaluation.create_assembly_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation Set 4", 
  "modified": "2021-01-11 10:25:07.899752", 
  "name": "Assembly Evaluation Set 4-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation Set 4\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.assembly_evaluation.assembly_evaluation.create_assembly_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Assembly Evaluation Set 5", 
  "modified": "2021-01-11 10:25:18.999493", 
  "name": "Assembly Evaluation Set 5-Client", 
  "script": "frappe.ui.form.on(\"Assembly Evaluation Set 5\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.assembly_evaluation.assembly_evaluation.create_assembly_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                        frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation Set 1", 
  "modified": "2021-01-11 11:36:35.524273", 
  "name": "Quality Evaluation Set 1-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation Set 1\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.quality_evaluation.quality_evaluation.create_quality_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation Set 2", 
  "modified": "2021-01-11 11:51:10.899061", 
  "name": "Quality Evaluation Set 2-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation Set 2\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.quality_evaluation.quality_evaluation.create_quality_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation Set 3", 
  "modified": "2021-01-11 11:51:24.281144", 
  "name": "Quality Evaluation Set 3-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation Set 3\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.quality_evaluation.quality_evaluation.create_quality_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation Set 4", 
  "modified": "2021-01-11 11:51:35.912146", 
  "name": "Quality Evaluation Set 4-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation Set 4\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.quality_evaluation.quality_evaluation.create_quality_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Quality Evaluation Set 5", 
  "modified": "2021-01-11 11:51:54.220362", 
  "name": "Quality Evaluation Set 5-Client", 
  "script": "frappe.ui.form.on(\"Quality Evaluation Set 5\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.quality_evaluation.quality_evaluation.create_quality_evaluation\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test Set 1", 
  "modified": "2021-01-11 12:53:34.687176", 
  "name": "Selection Test Set 1-Client", 
  "script": "frappe.ui.form.on(\"Selection Test Set 1\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.selection_test.selection_test.create_selection_test\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test Set 2", 
  "modified": "2021-01-11 14:28:06.150207", 
  "name": "Selection Test Set 2-Client", 
  "script": "frappe.ui.form.on(\"Selection Test Set 2\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.selection_test.selection_test.create_selection_test\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test Set 3", 
  "modified": "2021-01-11 14:28:18.033839", 
  "name": "Selection Test Set 3-Client", 
  "script": "frappe.ui.form.on(\"Selection Test Set 3\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.selection_test.selection_test.create_selection_test\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test Set 4", 
  "modified": "2021-01-11 14:28:37.155614", 
  "name": "Selection Test Set 4-Client", 
  "script": "frappe.ui.form.on(\"Selection Test Set 4\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.selection_test.selection_test.create_selection_test\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Selection Test Set 5", 
  "modified": "2021-01-11 14:28:48.371410", 
  "name": "Selection Test Set 5-Client", 
  "script": "frappe.ui.form.on(\"Selection Test Set 5\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.selection_test.selection_test.create_selection_test\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Induction Training Assembly Area Set 1", 
  "modified": "2021-01-12 12:33:58.806582", 
  "name": "Induction Training Assembly Area Set 1-Client", 
  "script": "frappe.ui.form.on(\"Induction Training Assembly Area Set 1\",{\nrefresh(frm){\nfrm.disable_save()\n$(cur_frm.fields_dict.submit.input).css(\"backgroundColor\",\"#05ffb0\");\n$(cur_frm.fields_dict.submit.input).css(\"zoom\", \"4\");\n},\nsubmit(frm){\nif(frm.doc.status != \"Active\"){\n\tfrappe.msgprint(\"Left Employees are not allowed to write test\")\n}\nelse{\nconsole.log(frm.doc.employee_code)\nfrappe.call({\n                    method: \"training.training.doctype.induction_training_assembly_area.induction_training_assembly_area.create_ita\",\n                    args: { \n                        \"frm\": frm.doc          \n                    },\n                    freeze: true,\n                    freeze_message: __(\"Updating\"),\n                    callback: function(r){\n                         frappe.msgprint(\"Test Submitted Successfully\")\n\t\t\tfrm.reload_doc()\n                    }\n                })\n}\n},\nemployee_code: function(frm){\n frappe.call({\n\t\"method\": \"frappe.client.get\",\n         args:{\n \t\"doctype\": \"Employee\",\n        \"name\": frm.doc.employee_code\n},\ncallback: function(r){\nfrm.set_value(\"status\",r.message.status)\nfrm.set_value(\"line_name\",r.message.line)\nfrm.set_value(\"associate\",r.message.employee_name)\nfrm.set_value(\"date_of_joining\",r.message.date_of_joining)\nfrm.set_value(\"shift\",r.message.shift)\n}\n})\n},\ndate_of_skill_evaluatation: function(frm){\nvar monthNames = [\n    \"Jan\", \"Feb\", \"Mar\",\n    \"Apr\", \"May\", \"Jun\", \"Jul\",\n    \"Aug\", \"Sep\", \"Oct\",\n    \"Nov\", \"Dec\"\n  ];\n  var date = new Date(frm.doc.date_of_skill_evaluatation);\n  var day = date.getDate();\n  var monthIndex = date.getMonth();\n  var year = date.getFullYear();\nvar moe = monthNames[monthIndex] + year;\n  frm.set_value(\"month_of_evaluation\", moe);\n},\n})\n", 
  "script_type": "Client"
 }
]